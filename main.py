import os
import logging
import asyncio
import aiohttp
import shutil
import sys
import time
if sys.platform == "linux":
    import fcntl
    try:
        fcntl.flock(sys.stdout, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CUSTOM_PAYMENT_BTN_TEXT = "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É"
MIN_PAYMENT_AMOUNT = 30  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
BASEROW_TOKEN = os.getenv("BASEROW_TOKEN")
TABLE_ID = int(os.getenv("TABLE_ID"))
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
YMONEY_TOKEN = os.getenv("YMONEY_TOKEN")
YMONEY_WALLET = os.getenv("YMONEY_WALLET")
PRICE_PER_TRY = 30  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –ø—Ä–∏–º–µ—Ä–∫—É –≤ —Ä—É–±–ª—è—Ö
FREE_USERS = {6320348591, 973853935}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
UPLOAD_DIR = "uploads"
MODELS_BUCKET = "models"
EXAMPLES_BUCKET = "primery"
UPLOADS_BUCKET = "uploads"  # –ë–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
SUPPORTED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.webp'}
MODELS_PER_PAGE = 3
EXAMPLES_PER_PAGE = 3
PORT = int(os.getenv("PORT", 8000))  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
os.makedirs(UPLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("Supabase client initialized successfully")
    
    buckets = supabase.storage.list_buckets()
    logger.info(f"Available buckets: {buckets}")
    
    if MODELS_BUCKET not in [b.name for b in buckets]:
        logger.error(f"Bucket '{MODELS_BUCKET}' not found in Supabase storage")
    if EXAMPLES_BUCKET not in [b.name for b in buckets]:
        logger.error(f"Bucket '{EXAMPLES_BUCKET}' not found in Supabase storage")
    if UPLOADS_BUCKET not in [b.name for b in buckets]:
        logger.error(f"Bucket '{UPLOADS_BUCKET}' not found in Supabase storage")
except Exception as e:
    logger.error(f"Failed to initialize Supabase client: {e}")
    supabase = None

async def upload_to_supabase(file_path: str, user_id: int, file_type: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage"""
    if not supabase:
        return False
    
    try:
        file_name = os.path.basename(file_path)
        destination_path = f"{user_id}/{file_type}/{file_name}"
        
        with open(file_path, 'rb') as f:
            res = supabase.storage.from_(UPLOADS_BUCKET).upload(
                path=destination_path,
                file=f,
                file_options={"content-type": "image/jpeg"}
            )
        
        logger.info(f"File {file_path} uploaded to Supabase as {destination_path}")
        return True
    except Exception as e:
        logger.error(f"Error uploading file to Supabase: {e}")
        return False

async def download_from_supabase(user_id: int, file_type: str, file_name: str, local_path: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Supabase Storage"""
    if not supabase:
        return False
    
    try:
        source_path = f"{user_id}/{file_type}/{file_name}"
        res = supabase.storage.from_(UPLOADS_BUCKET).download(source_path)
        
        with open(local_path, 'wb') as f:
            f.write(res)
        
        logger.info(f"File {source_path} downloaded from Supabase to {local_path}")
        return True
    except Exception as e:
        logger.error(f"Error downloading file from Supabase: {e}")
        return False

class BaserowAPI:
    def __init__(self):
        self.base_url = f"https://api.baserow.io/api/database/rows/table/{TABLE_ID}"
        self.headers = {
            "Authorization": f"Token {BASEROW_TOKEN}",
            "Content-Type": "application/json"
        }

    async def upsert_row(self, user_id: int, username: str, data: dict):
        try:
            url = f"{self.base_url}/?user_field_names=true&filter__user_id__equal={user_id}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers) as resp:
                    if resp.status != 200:
                        logger.error(f"Baserow GET error: {resp.status}")
                        return None
                    rows = await resp.json()
                    
                base_data = {
                    "user_id": str(user_id),
                    "username": username or ""
                }
                    
                if rows.get("results"):
                    row_id = rows["results"][0]["id"]
                    update_url = f"{self.base_url}/{row_id}/?user_field_names=true"
                    async with session.patch(update_url, headers=self.headers, json={**base_data, **data}) as resp:
                        return await resp.json()
                else:
                    async with session.post(f"{self.base_url}/?user_field_names=true", 
                                         headers=self.headers, 
                                         json={**base_data, **data}) as resp:
                        return await resp.json()
        except Exception as e:
            logger.error(f"Baserow API exception: {e}")
            return None

    async def reset_flags(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–ª–∞–∂–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            url = f"{self.base_url}/?user_field_names=true&filter__user_id__equal={user_id}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers) as resp:
                    if resp.status != 200:
                        logger.error(f"Baserow GET error: {resp.status}")
                        return False
                    rows = await resp.json()
                    
                if rows.get("results"):
                    row_id = rows["results"][0]["id"]
                    update_url = f"{self.base_url}/{row_id}/?user_field_names=true"
                    reset_data = {
                        "photo1_received": False,
                        "photo2_received": False,
                        "ready": False
                    }
                    async with session.patch(update_url, headers=self.headers, json=reset_data) as resp:
                        return resp.status == 200
        except Exception as e:
            logger.error(f"Error resetting flags: {e}")
            return False

baserow = BaserowAPI()

class PaymentManager:
    @staticmethod
    async def create_payment_link(amount: float, label: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆMoney"""
        return (
            f"https://yoomoney.ru/quickpay/confirm.xml?"
            f"receiver={YMONEY_WALLET}&"
            f"quickpay-form=small&"
            f"paymentType=AC,PC&"  # AC ‚Äî –∫–∞—Ä—Ç–∞, PC ‚Äî –ÆMoney (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
            f"sum={amount}&"
            f"label={label}&"
            f"targets=–û–ø–ª–∞—Ç–∞%20–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π%20–ø—Ä–∏–º–µ—Ä–∫–∏&"  # URL-encoded
            f"comment=–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ%20–ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π%20–±–æ—Ç–∞"   # URL-encoded
        )

    @staticmethod
    async def create_sbp_link(amount: float, label: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü"""
        return (
            f"https://yoomoney.ru/quickpay/confirm.xml?"
            f"receiver={YMONEY_WALLET}&"
            f"quickpay-form=small&"
            f"paymentType=SB&"  # SB ‚Äî –°–ë–ü
            f"sum={amount}&"
            f"label={label}&"
            f"targets=–û–ø–ª–∞—Ç–∞%20–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π%20–ø—Ä–∏–º–µ—Ä–∫–∏&"  # URL-encoded
            f"comment=–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ%20–ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π%20–±–æ—Ç–∞"   # URL-encoded
        )

    @staticmethod
    async def check_payment(label: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –º–µ—Ç–∫–µ"""
        url = "https://yoomoney.ru/api/operation-history"
        headers = {
            "Authorization": f"Bearer {YMONEY_TOKEN}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = {
            "type": "deposition",
            "label": label,
            "records": "1"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=data) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        return result.get("operations", []) != []
                    else:
                        logger.error(f"YooMoney API error: {resp.status} - {await resp.text()}")
        except Exception as e:
            logger.error(f"Error checking payment: {e}")
        return False

async def get_user_tries(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        url = f"https://api.baserow.io/api/database/rows/table/{TABLE_ID}/?user_field_names=true&filter__user_id__equal={user_id}"
        headers = {
            "Authorization": f"Token {BASEROW_TOKEN}",
            "Content-Type": "application/json"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as resp:
                if resp.status == 200:
                    rows = await resp.json()
                    if rows.get("results"):
                        return rows["results"][0].get("tries_left", 0)
    except Exception as e:
        logger.error(f"Error getting user tries: {e}")
    return 0

async def update_user_tries(user_id: int, tries: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        url = f"https://api.baserow.io/api/database/rows/table/{TABLE_ID}/?user_field_names=true&filter__user_id__equal={user_id}"
        headers = {
            "Authorization": f"Token {BASEROW_TOKEN}",
            "Content-Type": "application/json"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as resp:
                if resp.status == 200:
                    rows = await resp.json()
                    if rows.get("results"):
                        row_id = rows["results"][0]["id"]
                        update_url = f"https://api.baserow.io/api/database/rows/table/{TABLE_ID}/{row_id}/?user_field_names=true"
                        await session.patch(update_url, headers=headers, json={"tries_left": tries})
    except Exception as e:
        logger.error(f"Error updating user tries: {e}")

def list_all_files(bucket, prefix):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ Supabase Storage –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    files = []
    try:
        items = bucket.list(prefix)
        for item in items:
            name = item.get('name')
            if name:
                full_path = f"{prefix}/{name}".strip("/")
                if name.endswith('/'):
                    # –ü–∞–ø–∫–∞ ‚Äî –∏–¥–µ–º –≥–ª—É–±–∂–µ
                    files += list_all_files(bucket, full_path)
                else:
                    files.append(full_path)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ Supabase Storage –≤ {prefix}: {e}")
    return files

async def is_processing(user_id: int) -> bool:
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    if not os.path.exists(user_dir):
        return False
        
    photos = [
        f for f in os.listdir(user_dir)
        if f.startswith("photo_") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
    ]
    model_selected = os.path.exists(os.path.join(user_dir, "selected_model.jpg"))
    
    return (len(photos) >= 2 or (len(photos) >= 1 and model_selected))

async def send_initial_examples(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    try:
        media = [
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=1013DE2SDg8u0V69ePxTYki2WWSNaGWVi"),
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=1010hYD1PjCQX-hZQAfRPigkLyz1PAaCH"),
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=104v4mW-4-HIH40RIg9-L86sTPWQsxCEF")
        ]
        await bot.send_media_group(chat_id, media=media)
        logger.info(f"–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await bot.send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

async def get_examples_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ primery –≤ Supabase"""
    if not supabase:
        logger.warning("Supabase client not available")
        return []
    
    try:
        res = supabase.storage.from_(EXAMPLES_BUCKET).list()
        logger.info(f"Supabase storage response for examples: {res}")
        
        if not res:
            logger.warning("No examples found")
            return []
            
        examples = [
            file['name'] for file in res 
            if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
        ]
        
        logger.info(f"Found {len(examples)} examples")
        return examples
        
    except Exception as e:
        logger.error(f"Error getting examples list: {str(e)}", exc_info=True)
        return []

async def send_examples_page(chat_id: int, page: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    try:
        examples = await get_examples_list()
        if not examples:
            await bot.send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        start_idx = page * EXAMPLES_PER_PAGE
        end_idx = start_idx + EXAMPLES_PER_PAGE
        current_examples = examples[start_idx:end_idx]
        
        if not current_examples:
            await bot.send_message(chat_id, "‚úÖ –≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã.")
            return
            
        media = []
        for example in current_examples:
            try:
                image_url = supabase.storage.from_(EXAMPLES_BUCKET).get_public_url(example)
                media.append(InputMediaPhoto(media=image_url))
            except Exception as e:
                logger.error(f"Error loading example {example}: {e}")
                continue
        
        if media:
            await bot.send_media_group(chat_id, media=media)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard_buttons = []
            
            if end_idx < len(examples):
                keyboard_buttons.append(
                    InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data=f"more_examples_{page + 1}")
                )
            
            keyboard_buttons.append(
                InlineKeyboardButton(text="–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])
            
            await bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error sending examples: {e}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_models_list(category: str):
    if not supabase:
        logger.warning("Supabase client not available")
        return []
    
    try:
        res = supabase.storage.from_(MODELS_BUCKET).list(category)
        logger.info(f"Supabase storage response for {category}: {res}")
        
        if not res:
            logger.warning(f"No files found in {category} category")
            return []
            
        models = [
            file['name'] for file in res 
            if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
        ]
        
        logger.info(f"Found {len(models)} models in {category} category")
        return models
        
    except Exception as e:
        logger.error(f"Error getting models list for {category}: {str(e)}", exc_info=True)
        return []

async def notify_admin(message: str):
    if not ADMIN_CHAT_ID:
        return
        
    try:
        await bot.send_message(ADMIN_CHAT_ID, message)
    except Exception as e:
        logger.error(f"Error sending admin notification: {e}")

async def send_welcome(user_id: int, username: str, full_name: str):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞
        await send_initial_examples(user_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë´ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="choose_model")],
            [InlineKeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="view_examples_0")]
        ])
        
        await bot.send_message(
            user_id,
            "<b>–í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø</b>\n\n"
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–µ–∂–¥—ã.\n\n"
            "üìå <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b> \n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ ‚Äì –æ–¥–µ–∂–¥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ)\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ ‚Äì —á–µ–ª–æ–≤–µ–∫ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, 1 —Ñ–æ—Ç–æ) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å \n"
            "üëÜ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "üåà <b>–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏!!</b> \n\n"
            "üî¥ <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏!!!</b> \n\n" 
            "üîî –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é –æ–¥–µ–∂–¥—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ (–≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –æ–¥–µ–∂–¥—ã) –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É - –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–∞—Ç–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ 2-–æ–µ —Ñ–æ—Ç–æ (–≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –æ–¥–µ–∂–¥—ã) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç  –ø–µ—Ä–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n" 
            "üì∏ <b>–û–¢–ü–†–ê–í–¨–¢–ï –ü–ï–†–í–û–ï –§–û–¢–û (–æ–¥–µ–∂–¥–∞), –ñ–î–£!!!:</b>",
            reply_markup=keyboard
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–∂–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await baserow.reset_flags(user_id)
        
        await baserow.upsert_row(user_id, username, {
            "status": "started",
            "photo_clothes": False,
            "photo_person": False,
            "model_selected": None,
            "tries_left": 1  # –ü–µ—Ä–≤–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è
        }) 
        
        await notify_admin(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({user_id})")
        
    except Exception as e:
        logger.error(f"Welcome error for {user_id}: {e}")

@dp.message(Command("start"))
@dp.message(F.text & ~F.text.regexp(r'^\d+$'))  # –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_start(message: types.Message):
    if await is_processing(message.from_user.id):
        await message.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\nüîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        return
        
    await send_welcome(
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )

@dp.callback_query(F.data == "choose_model")
async def choose_model(callback_query: types.CallbackQuery):
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω—ã", callback_data="models_man_0")],
            [InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω—ã", callback_data="models_woman_0")],
            [InlineKeyboardButton(text="üßí –î–µ—Ç–∏", callback_data="models_child_0")]
        ])
        
        await callback_query.message.answer(
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in choose_model: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("view_examples_"))
async def view_examples(callback_query: types.CallbackQuery):
    try:
        page = int(callback_query.data.split("_")[-1])
        await send_examples_page(callback_query.from_user.id, page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in view_examples: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    try:
        await send_welcome(
            callback_query.from_user.id,
            callback_query.from_user.username,
            callback_query.from_user.full_name
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in back_to_menu: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data.startswith("more_examples_"))
async def more_examples(callback_query: types.CallbackQuery):
    try:
        page = int(callback_query.data.split("_")[-1])
        await send_examples_page(callback_query.from_user.id, page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in more_examples: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data.startswith("models_"))
async def show_category_models(callback_query: types.CallbackQuery):
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    data_parts = callback_query.data.split("_")
    if len(data_parts) != 3:
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", show_alert=True)
        return
        
    category = data_parts[1]
    page = int(data_parts[2])
    
    category_names = {
        "man": "üë® –ú—É–∂—Å–∫–∏–µ –º–æ–¥–µ–ª–∏",
        "woman": "üë© –ñ–µ–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏", 
        "child": "üßí –î–µ—Ç—Å–∫–∏–µ –º–æ–¥–µ–ª–∏"
    }
    
    try:
        models = await get_models_list(category)
        logger.info(f"Models to display for {category}: {models}")
        
        if not models:
            await callback_query.message.answer(f"‚ùå –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
            return

        start_idx = page * MODELS_PER_PAGE
        end_idx = start_idx + MODELS_PER_PAGE
        current_models = models[start_idx:end_idx]
        
        if page == 0:
            await callback_query.message.answer(f"{category_names.get(category, '–ú–æ–¥–µ–ª–∏')}:")

        for model in current_models:
            model_name = os.path.splitext(model)[0]
            
            try:
                image_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{category}/{model}")
                
                await bot.send_photo(
                    chat_id=callback_query.from_user.id,
                    photo=image_url,
                    caption=f"–ú–æ–¥–µ–ª—å: {model_name}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å",
                                    callback_data=f"model_{category}/{model}"
                                )
                            ]
                        ]
                    )
                )
            except Exception as e:
                logger.error(f"Error displaying model {model}: {e}")
                continue

        if end_idx < len(models):
            await callback_query.message.answer(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –º–æ–¥–µ–ª–∏?",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ",
                                callback_data=f"models_{category}_{page + 1}"
                            )
                        ]
                    ]
                )
            )
        else:
            await callback_query.message.answer("‚úÖ –≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    except Exception as e:
        logger.error(f"Error in show_category_models: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("model_"))
async def model_selected(callback_query: types.CallbackQuery):
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    model_path = callback_query.data.replace("model_", "")
    category, model_name = model_path.split('/')
    user_id = callback_query.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    
    try:
        await callback_query.message.delete()
        
        clothes_photo_exists = any(
            f.startswith("photo_1") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
            for f in os.listdir(user_dir)
        )

        model_display_name = os.path.splitext(model_name)[0]
        await baserow.upsert_row(user_id, callback_query.from_user.username, {
            "model_selected": model_path,
            "status": "model_selected"
        })
        
        if supabase:
            try:
                model_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{model_path}")
                
                model_path_local = os.path.join(user_dir, "selected_model.jpg")
                with open(model_path_local, 'wb') as f:
                    res = supabase.storage.from_(MODELS_BUCKET).download(f"{model_path}")
                    f.write(res)
                logger.info(f"Model {model_path} downloaded successfully")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ Supabase –≤ –ø–∞–ø–∫—É uploads
                await upload_to_supabase(model_path_local, user_id, "models")
                
                if clothes_photo_exists:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n"
                        "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                    )
                    await baserow.upsert_row(user_id, callback_query.from_user.username, {
                        "photo_person": True,
                        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                        "photo1_received": True,
                        "photo2_received": True
                    })
                    await notify_admin(f"üì∏ –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç @{callback_query.from_user.username} ({user_id})")
                else:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã."
                    )
                    await baserow.upsert_row(user_id, callback_query.from_user.username, {
                        "photo1_received": False,
                        "photo2_received": True
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–º—ã–π –Ω–∏–∑
                await bot.send_photo(
                    chat_id=user_id,
                    photo=model_url,
                    caption=response_text
                )
                
            except Exception as e:
                logger.error(f"Error downloading model: {e}")
                await bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é."
                )
                return
            
    except Exception as e:
        logger.error(f"Error in model_selected: {e}")
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user = message.from_user
    user_id = user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if user_id in FREE_USERS:
            await process_photo(message, user, user_dir)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
        tries_left = await get_user_tries(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
        if tries_left <= 0:
            await message.answer(
                "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
                "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏: 30 —Ä—É–±.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "30 —Ä—É–± = 1 –ø—Ä–∏–º–µ—Ä–∫–∞\n"
                "60 —Ä—É–± = 2 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
                "90 —Ä—É–± = 3 –ø—Ä–∏–º–µ—Ä–∫–∏ –∏ —Ç.–¥.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data="payment_options")]
                    ]
                )
            )
            return
            
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        await process_photo(message, user, user_dir)
        
    except Exception as e:
        logger.error(f"Error handling photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def process_photo(message: types.Message, user: types.User, user_dir: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"""
    try:
        existing_photos = [
            f for f in os.listdir(user_dir)
            if f.startswith("photo_") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
        ]
        
        photo_number = len(existing_photos) + 1
        
        if photo_number > 2:
            await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ 2 —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        model_selected = os.path.exists(os.path.join(user_dir, "selected_model.jpg"))
        first_photo_exists = any(f.startswith("photo_1") for f in existing_photos)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, –Ω–æ –µ—Å—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if photo_number == 2 and not model_selected and first_photo_exists:
            photo = message.photo[-1]
            file_ext = os.path.splitext(photo.file_id)[1] or '.jpg'
            file_name = f"photo_{photo_number}{file_ext}"
            file_path = os.path.join(user_dir, file_name)
            
            await bot.download(photo, destination=file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Supabase
            await upload_to_supabase(file_path, user.id, "photos")
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            tries_left = await get_user_tries(user.id)
            if tries_left > 0:
                await update_user_tries(user.id, tries_left - 1)
            
            await baserow.upsert_row(user.id, user.username, {
                "photo_person": True,
                "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "photo1_received": True,
                "photo2_received": True
            })
            
            await message.answer(
                "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
                "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            )
            await notify_admin(f"üì∏ –ù–æ–≤—ã–µ —Ñ–æ—Ç–æ –æ—Ç @{user.username} ({user.id})")
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if photo_number == 1:
            photo = message.photo[-1]
            file_ext = os.path.splitext(photo.file_id)[1] or '.jpg'
            file_name = f"photo_{photo_number}{file_ext}"
            file_path = os.path.join(user_dir, file_name)
            
            await bot.download(photo, destination=file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Supabase
            await upload_to_supabase(file_path, user.id, "photos")
            
            await baserow.upsert_row(user.id, user.username, {
                "photo_clothes": True,
                "status": "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞/–º–æ–¥–µ–ª–∏",
                "photo1_received": True,
                "photo2_received": False
            })
            
            response_text = (
                "‚úÖ –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞."
            )
            await message.answer(response_text)
            
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback_query: types.CallbackQuery):
    try:
        payment_label = callback_query.data.replace("check_payment_", "")
        is_paid = await PaymentManager.check_payment(payment_label)
        
        if is_paid:
            user_id = callback_query.from_user.id
            amount = int(payment_label.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –º–µ—Ç–∫–∏
            tries_to_add = amount // PRICE_PER_TRY
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            current_tries = await get_user_tries(user_id)
            new_tries = current_tries + tries_to_add
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ Baserow
            await update_user_tries(user_id, new_tries)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await callback_query.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {tries_to_add} –ø—Ä–∏–º–µ—Ä–æ–∫.\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_tries} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–∫.",
                reply_markup=None
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await notify_admin(
                f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç @{callback_query.from_user.username} ({user_id})\n"
                f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {tries_to_add}"
            )
        else:
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            await callback_query.answer(
                "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error in check_payment: {e}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@dp.callback_query(F.data == "payment_options")
async def show_payment_methods(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"""
    user = callback_query.from_user
    payment_label = f"user_{user.id}_{int(time.time())}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 30 —Ä—É–± (1 –ø—Ä–∏–º–µ—Ä–∫–∞)", 
                url=await PaymentManager.create_payment_link(30, payment_label + "_30")
            )
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 60 —Ä—É–± (2 –ø—Ä–∏–º–µ—Ä–∫–∏)", 
                url=await PaymentManager.create_payment_link(60, payment_label + "_60")
            )
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 90 —Ä—É–± (3 –ø—Ä–∏–º–µ—Ä–∫–∏)", 
                url=await PaymentManager.create_payment_link(90, payment_label + "_90")
            )
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É", 
                callback_data="custom_payment"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å)", 
                callback_data=f"check_payment_{payment_label}"
            )
        ]
    ])
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query(F.data == "custom_payment")
async def custom_payment(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"""
    user = callback_query.from_user
    payment_label = f"user_{user.id}_{int(time.time())}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π (–ª—é–±–∞—è —Å—É–º–º–∞)", 
                callback_data="custom_card_payment"
            )
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –°–ë–ü (–ª—é–±–∞—è —Å—É–º–º–∞)", 
                callback_data="custom_sbp_payment"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –æ–ø–ª–∞—Ç—ã", 
                callback_data="payment_options"
            )
        ]
    ])
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã:",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.callback_query(F.data == "custom_card_payment")
async def handle_custom_card_payment(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –∫–∞—Ä—Ç–æ–π"""
    user = callback_query.from_user
    payment_label = f"user_{user.id}_{int(time.time())}"
    
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 30 —Ä—É–±):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="custom_payment"
                )
            ]
        ])
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await dp.current_state(user=user.id).set_state("waiting_for_custom_amount_card")

@dp.message(F.text.regexp(r'^\d+$').as_("amount"), state="waiting_for_custom_amount_card")
async def process_custom_card_amount(message: types.Message, state: FSMContext, amount: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π"""
    user = message.from_user
    amount_int = int(amount)
    
    if amount_int < MIN_PAYMENT_AMOUNT:
        await message.answer(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã {MIN_PAYMENT_AMOUNT} —Ä—É–±.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="custom_payment"
                    )
                ]
            ])
        )
        return
    
    payment_label = f"user_{user.id}_{int(time.time())}_{amount_int}"
    payment_url = await PaymentManager.create_payment_link(amount_int, payment_label)
    
    await message.answer(
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount_int} —Ä—É–±.\n"
        f"–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount_int // PRICE_PER_TRY} –ø—Ä–∏–º–µ—Ä–æ–∫.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", 
                    url=payment_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å)", 
                    callback_data=f"check_payment_{payment_label}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="custom_payment"
                )
            ]
        ])
    )
    
    await state.finish()

@dp.callback_query(F.data == "custom_sbp_payment")
async def handle_custom_sbp_payment(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —á–µ—Ä–µ–∑ –°–ë–ü"""
    user = callback_query.from_user
    payment_label = f"user_{user.id}_{int(time.time())}"
    
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 30 —Ä—É–±):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="custom_payment"
                )
            ]
        ])
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await dp.current_state(user=user.id).set_state("waiting_for_custom_amount_sbp")

@dp.message(F.text.regexp(r'^\d+$').as_("amount"), state="waiting_for_custom_amount_sbp")
async def process_custom_sbp_amount(message: types.Message, state: FSMContext, amount: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü"""
    user = message.from_user
    amount_int = int(amount)
    
    if amount_int < MIN_PAYMENT_AMOUNT:
        await message.answer(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã {MIN_PAYMENT_AMOUNT} —Ä—É–±.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="custom_payment"
                    )
                ]
            ])
        )
        return
    
    payment_label = f"user_{user.id}_{int(time.time())}_{amount_int}"
    payment_url = await PaymentManager.create_sbp_link(amount_int, payment_label)
    
    await message.answer(
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount_int} —Ä—É–±.\n"
        f"–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount_int // PRICE_PER_TRY} –ø—Ä–∏–º–µ—Ä–æ–∫.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", 
                    url=payment_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å)", 
                    callback_data=f"check_payment_{payment_label}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="custom_payment"
                )
            ]
        ])
    )
    
    await state.finish()

async def check_results():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("üîÑ Starting check_results() loop...")
    while True:
        try:
            logger.info("üîç Scanning for results...")

            if not os.path.exists(UPLOAD_DIR):
                logger.warning(f"Directory {UPLOAD_DIR} does not exist!")
                await asyncio.sleep(10)
                continue

            for user_id_str in os.listdir(UPLOAD_DIR):
                user_dir = os.path.join(UPLOAD_DIR, user_id_str)
                if not os.path.isdir(user_dir):
                    continue

                logger.info(f"üìÅ Checking user dir: {user_dir}")

                # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω–æ result-—Ñ–∞–π–ª—ã
                result_files = [
                    f for f in os.listdir(user_dir)
                    if f.startswith("result") and f.lower().endswith(tuple(SUPPORTED_EXTENSIONS))
                ]

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ Supabase
                if not result_files:
                    for ext in SUPPORTED_EXTENSIONS:
                        try:
                            result_supabase_path = f"{user_id_str}/result{ext}"
                            result_file_local = os.path.join(user_dir, f"result{ext}")
                            os.makedirs(user_dir, exist_ok=True)

                            res = supabase.storage.from_(UPLOADS_BUCKET).download(result_supabase_path)
                            with open(result_file_local, 'wb') as f:
                                f.write(res)

                            logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω result{ext} –∏–∑ Supabase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
                            result_files = [f"result{ext}"]
                            break
                        except Exception as e:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å result{ext} –∏–∑ Supabase –¥–ª—è {user_id_str}: {e}")
                            continue

                # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                if result_files:
                    result_file = os.path.join(user_dir, result_files[0])

                    try:
                        user_id = int(user_id_str)

                        if not os.path.isfile(result_file) or not os.access(result_file, os.R_OK):
                            logger.warning(f"üö´ –§–∞–π–ª {result_file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
                            continue

                        if os.path.getsize(result_file) == 0:
                            logger.warning(f"üö´ –§–∞–π–ª {result_file} –ø—É—Å—Ç")
                            continue

                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id}")

                        photo = FSInputFile(result_file)
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption="üéâ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!"
                        )

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        try:
                            file_ext = os.path.splitext(result_file)[1].lower()
                            supabase_path = f"{user_id}/results/result_{int(time.time())}{file_ext}"

                            with open(result_file, 'rb') as f:
                                supabase.storage.from_(UPLOADS_BUCKET).upload(
                                    path=supabase_path,
                                    file=f,
                                    file_options={"content-type": "image/jpeg" if file_ext in ('.jpg', '.jpeg') else
                                          "image/png" if file_ext == '.png' else
                                          "image/webp"}
                                )
                            logger.info(f"‚òÅÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {supabase_path}")
                        except Exception as upload_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase: {upload_error}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º Baserow
                        try:
                            await baserow.upsert_row(user_id, "", {
                                "status": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                                "result_sent": True,
                                "ready": True,
                                "result_url": supabase_path if 'supabase_path' in locals() else None
                            })
                        except Exception as db_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Baserow: {db_error}")

                        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                        try:
                            shutil.rmtree(user_dir)
                            logger.info(f"üóëÔ∏è –ü–∞–ø–∫–∞ {user_dir} —É–¥–∞–ª–µ–Ω–∞")
                        except Exception as cleanup_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {cleanup_error}")

                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
                        try:
                            base = supabase.storage.from_(UPLOADS_BUCKET)
                            files_to_delete = []

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            for ext in SUPPORTED_EXTENSIONS:
                                files_to_delete.extend([
                                    f"{user_id_str}/photos/photo_1{ext}",
                                    f"{user_id_str}/photos/photo_2{ext}"
                                ])

                            # –î–æ–±–∞–≤–ª—è–µ–º result-—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ results
                            try:
                                result_files_in_supabase = base.list(f"{user_id_str}/results")
                                for f in result_files_in_supabase:
                                    if f['name'].startswith("result"):
                                        files_to_delete.append(f"{user_id_str}/results/{f['name']}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result-—Ñ–∞–π–ª–æ–≤ –∏–∑ results/: {e}")

                            # –î–æ–±–∞–≤–ª—è–µ–º result-—Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è uploads/{user_id}/
                            try:
                                root_files = base.list(user_id_str)
                                for f in root_files:
                                    if f['name'].startswith("result") and any(f['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS):
                                        files_to_delete.append(f"{user_id_str}/{f['name']}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result-—Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è: {e}")

                            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                            existing_files = []
                            for file_path in files_to_delete:
                                try:
                                    base.download(file_path)
                                    existing_files.append(file_path)
                                except Exception:
                                    continue

                            if existing_files:
                                logger.info(f"‚û°Ô∏è –£–¥–∞–ª—è–µ–º –∏–∑ Supabase: {existing_files}")
                                base.remove(existing_files)
                                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {len(existing_files)} —à—Ç.")
                            else:
                                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")

                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {e}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                        continue

            await asyncio.sleep(30)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_results(): {e}")
            await asyncio.sleep(30)

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    return web.Response(text="Bot is running")

async def health_check(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return web.Response(text="OK", status=200)

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    asyncio.create_task(check_results())

async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("Shutting down...")
    await bot.delete_webhook()
    logger.info("Webhook removed")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        app = web.Application()
        app.router.add_get('/', handle_webhook)
        app.router.add_get('/health', health_check)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        logger.info(f"Web server started on port {PORT}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by keyboard interrupt")
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
    finally:
        loop.run_until_complete(on_shutdown(None))
        loop.close()
        logger.info("Bot successfully shut down")