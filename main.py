async def check_results():
    logger.info("üîÑ Starting check_results() loop...")
    while True:
        try:
            logger.info("üîç Scanning for results...")

            if not os.path.exists(UPLOAD_DIR):
                logger.warning(f"Directory {UPLOAD_DIR} does not exist!")
                await asyncio.sleep(10)
                continue

            for user_id_str in os.listdir(UPLOAD_DIR):
                user_dir = os.path.join(UPLOAD_DIR, user_id_str)
                if not os.path.isdir(user_dir):
                    continue

                logger.info(f"üìÅ Checking user dir: {user_dir}")

                # 1. –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω–æ result-—Ñ–∞–π–ª—ã
                result_files = [
                    f for f in os.listdir(user_dir)
                    if f.startswith("result") and f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))
                ]

                # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ Supabase uploads/<user_id>/result.jpg
                if not result_files:
                    try:
                        result_supabase_path = f"{user_id_str}/result.jpg"
                        result_file_local = os.path.join(user_dir, "result.jpg")
                        os.makedirs(user_dir, exist_ok=True)

                        res = supabase.storage.from_(UPLOADS_BUCKET).download(result_supabase_path)
                        with open(result_file_local, 'wb') as f:
                            f.write(res)

                        logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω result.jpg –∏–∑ Supabase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
                        result_files = ["result.jpg"]
                    except Exception as e:
                        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å result.jpg –∏–∑ Supabase –¥–ª—è {user_id_str}: {e}")
                        continue

                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                result_file = os.path.join(user_dir, result_files[0])

                try:
                    user_id = int(user_id_str)

                    if not os.path.isfile(result_file) or not os.access(result_file, os.R_OK):
                        logger.warning(f"üö´ –§–∞–π–ª {result_file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
                        continue

                    if os.path.getsize(result_file) == 0:
                        logger.warning(f"üö´ –§–∞–π–ª {result_file} –ø—É—Å—Ç")
                        continue

                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id}")

                    photo = FSInputFile(result_file)
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption="üéâ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!"
                    )

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase —Å –Ω–æ–≤—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                    try:
                        file_ext = os.path.splitext(result_file)[1].lower()
                        supabase_path = f"{user_id}/results/result_{int(time.time())}{file_ext}"

                        with open(result_file, 'rb') as f:
                            supabase.storage.from_(UPLOADS_BUCKET).upload(
                                path=supabase_path,
                                file=f,
                                file_options={"content-type": "image/jpeg" if file_ext in ('.jpg', '.jpeg') else
                                              "image/png" if file_ext == '.png' else
                                              "image/webp"}
                            )
                        logger.info(f"‚òÅÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {supabase_path}")
                    except Exception as upload_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase: {upload_error}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º Baserow
                    try:
                        await baserow.upsert_row(user_id, "", {
                            "status": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                            "result_sent": True,
                            "ready": True,
                            "result_url": supabase_path if 'supabase_path' in locals() else None
                        })
                    except Exception as db_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Baserow: {db_error}")

                    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                    try:
                        shutil.rmtree(user_dir)
                        logger.info(f"üóëÔ∏è –ü–∞–ø–∫–∞ {user_dir} —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as cleanup_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {cleanup_error}")

                    # –£–¥–∞–ª—è–µ–º –í–°–ï —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase (–≤–∫–ª—é—á–∞—è photos/, result.jpg –∏ results/)
                    try:
                        all_files = supabase.storage.from_(UPLOADS_BUCKET).list(user_id_str, {"recursive": True})
                        file_paths = [f"{user_id_str}/{file['name']}" for file in all_files]

                        if file_paths:
                            supabase.storage.from_(UPLOADS_BUCKET).remove(file_paths)
                            logger.info(f"üóëÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} —É–¥–∞–ª–µ–Ω—ã –∏–∑ Supabase: {len(file_paths)} —à—Ç.")
                        else:
                            logger.info(f"‚ÑπÔ∏è –í Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {e}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                    continue

            await asyncio.sleep(30)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_results(): {e}")
            await asyncio.sleep(30)
