i
                "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É:\n"
                "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏: 30 —Ä—É–±.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "30 —Ä—É–± = 1 –ø—Ä–∏–º–µ—Ä–∫–∞\n"
                "60 —Ä—É–± = 2 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
                "90 —Ä—É–± = 3 –ø—Ä–∏–º–µ—Ä–∫–∏ –∏ —Ç.–¥.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 30 —Ä—É–± (1 –ø—Ä–∏–º–µ—Ä–∫–∞)", 
                            url=make_donation_link(user, 30)
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 60 —Ä—É–± (2 –ø—Ä–∏–º–µ—Ä–∫–∏)", 
                            url=make_donation_link(user, 60)
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É", 
                            url=make_donation_link(user, 30, False)
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", 
                            callback_data="confirm_donation"
                        )
                    ]
                ])
            )
            return
            
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        await process_photo(message, user, user_dir)
        
    except Exception as e:
        logger.error(f"Error handling photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def process_photo(message: types.Message, user: types.User, user_dir: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"""
    try:
        existing_photos = [
            f for f in os.listdir(user_dir)
            if f.startswith("photo_") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
        ]
        
        photo_number = len(existing_photos) + 1
        
        if photo_number > 2:
            await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ 2 —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        model_selected = os.path.exists(os.path.join(user_dir, "selected_model.jpg"))
        first_photo_exists = any(f.startswith("photo_1") for f in existing_photos)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, –Ω–æ –µ—Å—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if photo_number == 2 and not model_selected and first_photo_exists:
            photo = message.photo[-1]
            file_ext = os.path.splitext(photo.file_id)[1] or '.jpg'
            file_name = f"photo_{photo_number}{file_ext}"
            file_path = os.path.join(user_dir, file_name)
            
            await bot.download(photo, destination=file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Supabase
            await upload_to_supabase(file_path, user.id, "photos")
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            tries_left = await get_user_tries(user.id)
            if tries_left > 0:
                await update_user_tries(user.id, tries_left - 1)
            
            await baserow.upsert_row(user.id, user.username, {
                "photo_person": True,
                "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "photo1_received": True,
                "photo2_received": True
            })
            
            await message.answer(
                "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
                "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            )
            await notify_admin(f"üì∏ –ù–æ–≤—ã–µ —Ñ–æ—Ç–æ –æ—Ç @{user.username} ({user.id})")
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if photo_number == 1:
            photo = message.photo[-1]
            file_ext = os.path.splitext(photo.file_id)[1] or '.jpg'
            file_name = f"photo_{photo_number}{file_ext}"
            file_path = os.path.join(user_dir, file_name)
            
            await bot.download(photo, destination=file_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Supabase
            await upload_to_supabase(file_path, user.id, "photos")
            
            await baserow.upsert_row(user.id, user.username, {
                "photo_clothes": True,
                "status": "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞/–º–æ–¥–µ–ª–∏",
                "photo1_received": True,
                "photo2_received": False
            })
            
            response_text = (
                "‚úÖ –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞."
            )
            await message.answer(response_text)
            
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.callback_query(F.data == "payment_options")
async def show_payment_methods(callback_query: types.CallbackQuery):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π"""
    user = callback_query.from_user
    await callback_query.message.edit_text(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 30 —Ä—É–± (1 –ø—Ä–∏–º–µ—Ä–∫–∞)", 
                    url=make_donation_link(user, 30)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 60 —Ä—É–± (2 –ø—Ä–∏–º–µ—Ä–∫–∏)", 
                    url=make_donation_link(user, 60)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É", 
                    url=make_donation_link(user, 30, False)
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", 
                    callback_data="confirm_donation"
                )
            ]
        ])
    )
    await callback_query.answer()

@dp.callback_query(F.data == "confirm_donation")
async def confirm_donation(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    await callback_query.message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –ø–ª–∞—Ç—ë–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n\n"
        "–ï—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤–∞—à Telegram username –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –≤–∞—Å –Ω–∞–π—Ç–∏. "
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    await notify_admin(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} ({user.id}) —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ DonationAlerts. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")

async def handle_donation_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ DonationAlerts"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_token = request.headers.get('Authorization')
        if auth_token != f"Bearer {DONATION_ALERTS_TOKEN}":
            logger.warning(f"Invalid auth token: {auth_token}")
            return web.Response(status=403)
        
        data = await request.json()
        logger.info(f"Donation received: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if data.get('status') == 'success':
            amount = int(float(data.get('amount', 0)))
            user_message = data.get('message', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Telegram username –∏–ª–∏ ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            telegram_username = None
            telegram_id = None
            if user_message.startswith('@'):
                telegram_username = user_message[1:].strip()
            elif 'TelegramID_' in user_message:
                try:
                    telegram_id = int(user_message.replace('TelegramID_', '').strip())
                except ValueError:
                    logger.error(f"Invalid Telegram ID format in message: {user_message}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫ (1 –ø—Ä–∏–º–µ—Ä–∫–∞ = 30 —Ä—É–±)
            tries_added = max(1, amount // PRICE_PER_TRY)
            
            if not telegram_username and not telegram_id:
                logger.warning("No valid user identifier in donation message")
                return web.Response(status=200)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user_identifier = telegram_username or f"TelegramID_{telegram_id}"
            logger.info(f"Processing payment for {user_identifier}, amount: {amount} —Ä—É–±, tries to add: {tries_added}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Baserow
            update_success = False
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    "tries_left": tries_added,
                    "last_payment_amount": amount,
                    "last_payment_date": time.strftime("%Y-%m-%d %H:%M:%S"),
                    "payment_status": "–û–ø–ª–∞—á–µ–Ω–æ",
                    "status": "–ê–∫—Ç–∏–≤–µ–Ω"
                }

                # –ï—Å–ª–∏ –µ—Å—Ç—å username, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
                if telegram_username:
                    update_data["username"] = telegram_username

                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Baserow
                if telegram_id:
                    filter_field = "user_id"
                    filter_value = str(telegram_id)
                else:
                    filter_field = "username"
                    filter_value = telegram_username

                # –í—ã–ø–æ–ª–Ω—è–µ–º upsert –≤ Baserow
                result = await baserow.upsert_row(
                    user_id=telegram_id if telegram_id else 0,  # 0 –µ—Å–ª–∏ –Ω–µ—Ç ID
                    username=telegram_username or "",
                    data=update_data
                )

                if result:
                    update_success = True
                    logger.info(f"Successfully updated Baserow for {user_identifier}")
                else:
                    logger.error(f"Failed to update Baserow for {user_identifier}")

            except Exception as e:
                logger.error(f"Error updating Baserow for {user_identifier}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                admin_message = (
                    f"üí∞ –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ DonationAlerts:\n"
                    f"‚Ä¢ –°—É–º–º–∞: {amount} —Ä—É–±\n"
                    f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {tries_added}\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_identifier}\n"
                    f"‚Ä¢ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {'–£—Å–ø–µ—à–Ω–æ' if update_success else '–û—à–∏–±–∫–∞'}"
                )
                await notify_admin(admin_message)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_id)
                if telegram_id:
                    try:
                        user_message = (
                            f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} —Ä—É–± —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n\n"
                            f"–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {tries_added} –ø—Ä–∏–º–µ—Ä–æ–∫.\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º."
                        )
                        await bot.send_message(telegram_id, user_message)
                    except Exception as e:
                        logger.error(f"Error sending notification to user {telegram_id}: {e}")
                        await notify_admin(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_identifier}")

            except Exception as e:
                logger.error(f"Error sending notifications: {e}")

    except Exception as e:
        logger.error(f"Error processing donation webhook: {e}", exc_info=True)
    
    return web.Response(status=200)

async def check_results():
    logger.info("üîÑ Starting check_results() loop...")
    while True:
        try:
            logger.info("üîç Scanning for results...")

            if not os.path.exists(UPLOAD_DIR):
                logger.warning(f"Directory {UPLOAD_DIR} does not exist!")
                await asyncio.sleep(10)
                continue

            for user_id_str in os.listdir(UPLOAD_DIR):
                user_dir = os.path.join(UPLOAD_DIR, user_id_str)
                if not os.path.isdir(user_dir):
                    continue

                logger.info(f"üìÅ Checking user dir: {user_dir}")

                # 1. –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω–æ result-—Ñ–∞–π–ª—ã —Å –ª—é–±—ã–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                result_files = [
                    f for f in os.listdir(user_dir)
                    if f.startswith("result") and f.lower().endswith(tuple(SUPPORTED_EXTENSIONS))
                ]

                # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ Supabase
                if not result_files:
                    for ext in SUPPORTED_EXTENSIONS:
                        try:
                            result_supabase_path = f"{user_id_str}/result{ext}"
                            result_file_local = os.path.join(user_dir, f"result{ext}")
                            os.makedirs(user_dir, exist_ok=True)

                            res = supabase.storage.from_(UPLOADS_BUCKET).download(result_supabase_path)
                            with open(result_file_local, 'wb') as f:
                                f.write(res)

                            logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω result{ext} –∏–∑ Supabase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
                            result_files = [f"result{ext}"]
                            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                        except Exception as e:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å result{ext} –∏–∑ Supabase –¥–ª—è {user_id_str}: {e}")
                            continue

                # 3. –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                if result_files:
                    result_file = os.path.join(user_dir, result_files[0])

                    try:
                        user_id = int(user_id_str)

                        if not os.path.isfile(result_file) or not os.access(result_file, os.R_OK):
                            logger.warning(f"üö´ –§–∞–π–ª {result_file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
                            continue

                        if os.path.getsize(result_file) == 0:
                            logger.warning(f"üö´ –§–∞–π–ª {result_file} –ø—É—Å—Ç")
                            continue

                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id}")

                        photo = FSInputFile(result_file)
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption="üéâ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!"
                        )

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase —Å –Ω–æ–≤—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        try:
                            file_ext = os.path.splitext(result_file)[1].lower()
                            supabase_path = f"{user_id}/results/result_{int(time.time())}{file_ext}"

                            with open(result_file, 'rb') as f:
                                supabase.storage.from_(UPLOADS_BUCKET).upload(
                                    path=supabase_path,
                                    file=f,
                                    file_options={"content-type": "image/jpeg" if file_ext in ('.jpg', '.jpeg') else
                                          "image/png" if file_ext == '.png' else
                                          "image/webp"}
                                )
                            logger.info(f"‚òÅÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {supabase_path}")
                        except Exception as upload_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase: {upload_error}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º Baserow
                        try:
                            await baserow.upsert_row(user_id, "", {
                                "status": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                                "result_sent": True,
                                "ready": True,
                                "result_url": supabase_path if 'supabase_path' in locals() else None
                            })
                        except Exception as db_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Baserow: {db_error}")

                        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                        try:
                            shutil.rmtree(user_dir)
                            logger.info(f"üóëÔ∏è –ü–∞–ø–∫–∞ {user_dir} —É–¥–∞–ª–µ–Ω–∞")
                        except Exception as cleanup_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {cleanup_error}")

                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
                        try:
                            base = supabase.storage.from_(UPLOADS_BUCKET)
                            files_to_delete = []

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            for ext in SUPPORTED_EXTENSIONS:
                                files_to_delete.extend([
                                    f"{user_id_str}/photos/photo_1{ext}",
                                    f"{user_id_str}/photos/photo_2{ext}"
                                ])

                            # –î–æ–±–∞–≤–ª—è–µ–º result-—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ results
                            try:
                                result_files_in_supabase = base.list(f"{user_id_str}/results")
                                for f in result_files_in_supabase:
                                    if f['name'].startswith("result"):
                                        files_to_delete.append(f"{user_id_str}/results/{f['name']}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result-—Ñ–∞–π–ª–æ–≤ –∏–∑ results/: {e}")

                            # –î–æ–±–∞–≤–ª—è–µ–º result-—Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è uploads/{user_id}/
                            try:
                                root_files = base.list(user_id_str)
                                for f in root_files:
                                    if f['name'].startswith("result") and any(f['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS):
                                        files_to_delete.append(f"{user_id_str}/{f['name']}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result-—Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è: {e}")

                            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                            existing_files = []
                            for file_path in files_to_delete:
                                try:
                                    base.download(file_path)
                                    existing_files.append(file_path)
                                except Exception:
                                    continue

                            if existing_files:
                                logger.info(f"‚û°Ô∏è –£–¥–∞–ª—è–µ–º –∏–∑ Supabase: {existing_files}")
                                base.remove(existing_files)
                                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {len(existing_files)} —à—Ç.")
                            else:
                                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")

                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {e}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                        continue

            await asyncio.sleep(30)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_results(): {e}")
            await asyncio.sleep(30)

async def handle(request):
    return web.Response(text="Bot is running")

async def health_check(request):
    return web.Response(text="OK", status=200)

def setup_web_server():
    app = web.Application()
    
    app.router.add_get('/', handle)
    app.router.add_get('/health', health_check)
    app.router.add_post('/donation_callback', handle_donation_webhook)
    app.router.add_post(f'/{BOT_TOKEN.split(":")[1]}', webhook_handler)
    return app

async def webhook_handler(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(status=500, text="Internal Server Error")
    
async def start_web_server():
    app = setup_web_server()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"Web server started on port {PORT}")
    
async def on_shutdown():
    logger.info("Shutting down...")
    await bot.delete_webhook()  # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("Webhook removed")

async def main():
    try:
        logger.info("Starting bot...")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        app = setup_web_server()
        runner = web.AppRunner(app)
        await runner.setup()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        webhook_url = f"https://virtual-tryon-bot.onrender.com/{BOT_TOKEN.split(':')[1]}"
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
        )
        logger.info(f"Webhook set to: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        logger.info(f"Web server started on port {PORT}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        asyncio.create_task(check_results())
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è)
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ—Å—Ç–æ –∂–¥—ë–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –ó–∞–ø—É—Å–∫ main() —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        loop.run_until_complete(main())

    except KeyboardInterrupt:
        logger.info("Bot stopped by keyboard interrupt")

    except Exception as e:
        logger.critical(f"Fatal error: {e}")

    finally:
        # –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º on_shutdown() –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        loop.run_until_complete(on_shutdown())
        loop.close()
        logger.info("Bot successfully shut down")