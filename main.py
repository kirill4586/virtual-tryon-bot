import os
import logging
import asyncio
import aiohttp
import shutil
import time
import sys
if sys.platform == "linux":
    import fcntl
    try:
        fcntl.flock(sys.stdout, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
PRICE_PER_TRY = 30  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –ø—Ä–∏–º–µ—Ä–∫—É –≤ —Ä—É–±–ª—è—Ö
FREE_USERS = {6320348591, 973853935}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
UPLOAD_DIR = "uploads"
MODELS_BUCKET = "models"
EXAMPLES_BUCKET = "primery"
UPLOADS_BUCKET = "uploads"  # –ë–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
SUPPORTED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.webp'}
MODELS_PER_PAGE = 3
EXAMPLES_PER_PAGE = 3
DONATION_ALERTS_TOKEN = os.getenv("DONATION_ALERTS_TOKEN", "").strip()
PORT = int(os.getenv("PORT", 4000))

# –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ Supabase
USERS_TABLE = "users"
ACCESS_FIELD = "access_granted"
AMOUNT_FIELD = "payment_amount"
TRIES_FIELD = "tries_left"
STATUS_FIELD = "status"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
	)
dp = Dispatcher(storage=MemoryStorage())
os.makedirs(UPLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("Supabase client initialized successfully")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        res = supabase.table(USERS_TABLE).select("*").limit(1).execute()
        logger.info(f"Users table exists with {len(res.data)} records")
    except Exception as e:
        logger.error(f"Users table check failed: {e}")
        raise Exception("Users table not found in Supabase")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∫–µ—Ç–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    buckets = supabase.storage.list_buckets()
    logger.info(f"Available buckets: {buckets}")
    
    required_buckets = [MODELS_BUCKET, EXAMPLES_BUCKET, UPLOADS_BUCKET]
    for bucket in required_buckets:
        if bucket not in [b.name for b in buckets]:
            logger.error(f"Bucket '{bucket}' not found in Supabase storage")
            raise Exception(f"Required bucket '{bucket}' not found")

except Exception as e:
    logger.error(f"Failed to initialize Supabase: {e}")
    raise

class SupabaseAPI:
    def __init__(self):
        self.supabase = supabase
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def get_user_row(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase"""
        try:
            res = self.supabase.table(USERS_TABLE)\
                .select("*")\
                .eq("user_id", str(user_id))\
                .execute()
            
            if res.data and len(res.data) > 0:
                return res.data[0]
            return None
        except Exception as e:
            logger.error(f"Error getting user row: {e}")
            return None

    async def update_user_row(self, user_id: int, data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
        try:
            res = self.supabase.table(USERS_TABLE)\
                .update(data)\
                .eq("user_id", str(user_id))\
                .execute()
            
            return res.data[0] if res.data else None
        except Exception as e:
            logger.error(f"Error updating user row: {e}")
            return None

    async def check_and_update_access(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫"""
        try:
            row = await self.get_user_row(user_id)
            if not row:
                return 0

            payment_amount = float(row.get(AMOUNT_FIELD, 0)) if row.get(AMOUNT_FIELD) else 0.0
            tries_left = int(row.get(TRIES_FIELD, 0)) if row.get(TRIES_FIELD) else 0

            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–ª–∞—Ç–∞, –Ω–æ –¥–æ—Å—Ç—É–ø –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            if payment_amount > 0 and not row.get(ACCESS_FIELD, False):
                tries_left = int(payment_amount / PRICE_PER_TRY)
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: True,
                    TRIES_FIELD: tries_left,
                    STATUS_FIELD: "–û–ø–ª–∞—á–µ–Ω–æ"
                })
                return tries_left

            if not row.get(ACCESS_FIELD, False):
                return 0

            if tries_left <= 0:
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: False,
                    STATUS_FIELD: "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                })
                return 0

            return tries_left

        except Exception as e:
            logger.error(f"Error in check_and_update_access: {e}")
            return None

    async def decrement_tries(self, user_id: int):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫ –Ω–∞ 1 –∏ –≤—ã—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Å—É–º–º—ã"""
        try:
            row = await self.get_user_row(user_id)
            if not row:
                return False

            tries_left = int(row.get(TRIES_FIELD, 0)) if row.get(TRIES_FIELD) else 0
            amount = float(row.get(AMOUNT_FIELD, 0)) if row.get(AMOUNT_FIELD) else 0.0

            new_tries = max(0, tries_left - 1)
            new_amount = max(0, amount - PRICE_PER_TRY)

            update_data = {
                TRIES_FIELD: new_tries,
                AMOUNT_FIELD: new_amount,
                "last_try_date": time.strftime("%Y-%m-%d %H:%M:%S")
            }

            if new_tries <= 0:
                update_data[ACCESS_FIELD] = False
                update_data[STATUS_FIELD] = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

            updated = await self.update_user_row(user_id, update_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–ø–∏—Å–∞–Ω–∏–∏
            if updated:
                try:
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –ü—Ä–∏–º–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–æ–∫: {new_tries}\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á–µ—Ç—É: {new_amount} —Ä—É–±."
                    )
                except Exception as e:
                    logger.error(f"Error sending tries update to user: {e}")
            
            return updated is not None

        except Exception as e:
            logger.error(f"Error decrementing tries: {e}")
            return False

    async def upsert_row(self, user_id: int, username: str, data: dict):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
        try:
            row = await self.get_user_row(user_id)
            data.update({
                "user_id": str(user_id),
                "username": username or "",
                "updated_at": time.strftime("%Y-%m-%d %H:%M:%S")
            })

            if row:
                res = self.supabase.table(USERS_TABLE)\
                    .update(data)\
                    .eq("user_id", str(user_id))\
                    .execute()
                result = res.data[0] if res.data else None
            else:
                data["created_at"] = time.strftime("%Y-%m-%d %H:%M:%S")
                res = self.supabase.table(USERS_TABLE)\
                    .insert(data)\
                    .execute()
                result = res.data[0] if res.data else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
            if 'payment_amount' in data and data['payment_amount'] > 0:
                payment_amount = data['payment_amount']
                tries_left = int(payment_amount / PRICE_PER_TRY)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                try:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ {payment_amount} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                        f"üéÅ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {tries_left} –ø—Ä–∏–º–µ—Ä–æ–∫"
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    if ADMIN_CHAT_ID:
                        await bot.send_message(
                            ADMIN_CHAT_ID,
                            f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) "
                            f"–æ–ø–ª–∞—Ç–∏–ª {payment_amount} —Ä—É–±. –ü–æ–ª—É—á–µ–Ω–æ {tries_left} –ø—Ä–∏–º–µ—Ä–æ–∫."
                        )
                except Exception as e:
                    logger.error(f"Error sending payment notifications: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: True,
                    TRIES_FIELD: tries_left,
                    STATUS_FIELD: "–û–ø–ª–∞—á–µ–Ω–æ"
                })
            
            return result
        except Exception as e:
            logger.error(f"Error in upsert_row: {e}")
            return None

    async def reset_flags(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return await self.update_user_row(user_id, {
                "photo1_received": False,
                "photo2_received": False,
                "ready": False
            }) is not None
        except Exception as e:
            logger.error(f"Error resetting flags: {e}")
            return False

    async def check_payment_changes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        while True:
            try:
                logger.info("üîç Checking for payment changes...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º payment_amount
                res = self.supabase.table(USERS_TABLE)\
                    .select("user_id, username, payment_amount, tries_left")\
                    .neq("payment_amount", 0)\
                    .execute()
                
                if not res.data:
                    await asyncio.sleep(10)
                    continue
                
                for user_data in res.data:
                    user_id = int(user_data['user_id'])
                    current_amount = float(user_data['payment_amount'])
                    current_tries = int(user_data['tries_left'])
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–µ—à–∞
                    prev_state = self.user_states.get(user_id, {})
                    prev_amount = prev_state.get('payment_amount', 0)
                    prev_tries = prev_state.get('tries_left', 0)
                    
                    # –ï—Å–ª–∏ —Å—É–º–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    if current_amount != prev_amount or current_tries != prev_tries:
                        logger.info(f"üí∞ Payment change detected for user {user_id}: "
                                  f"amount {prev_amount}->{current_amount}, "
                                  f"tries {prev_tries}->{current_tries}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                        self.user_states[user_id] = {
                            'payment_amount': current_amount,
                            'tries_left': current_tries
                        }
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        try:
                            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await bot.send_message(
                                user_id,
                                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
                                f"–°—É–º–º–∞: {current_amount} —Ä—É–±.\n"
                                f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {current_tries}"
                            )
                            
                            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                            if ADMIN_CHAT_ID:
                                await bot.send_message(
                                    ADMIN_CHAT_ID,
                                    f"üîÑ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data['username']} ({user_id}) –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
                                    f"–°—É–º–º–∞: {current_amount} —Ä—É–±.\n"
                                    f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {current_tries}"
                                )
                        except Exception as e:
                            logger.error(f"Error sending payment change notification: {e}")
                
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"Error in check_payment_changes: {e}")
                await asyncio.sleep(30)

supabase_api = SupabaseAPI()

async def cleanup_resources():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    logger.info("Cleaning up resources...")
    
    if 'session' in globals():
        await session.close()
    
    await bot.session.close()
    
    logger.info("All resources cleaned up")

async def on_shutdown():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    try:
        logger.info("Shutting down...")
        
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
        
        await asyncio.gather(*tasks, return_exceptions=True)
        
        await bot.delete_webhook()
        logger.info("Webhook removed")
        
        await cleanup_resources()
        
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    finally:
        logger.info("Bot successfully shut down")

async def upload_to_supabase(file_path: str, user_id: int, file_type: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage"""
    if not supabase:
        return False
    
    try:
        file_name = os.path.basename(file_path)
        destination_path = f"{user_id}/{file_type}/{file_name}"
        
        with open(file_path, 'rb') as f:
            res = supabase.storage.from_(UPLOADS_BUCKET).upload(
                path=destination_path,
                file=f,
                file_options={"content-type": "image/jpeg"}
            )
        
        logger.info(f"File {file_path} uploaded to Supabase as {destination_path}")
        return True
    except Exception as e:
        logger.error(f"Error uploading file to Supabase: {e}")
        return False

async def download_from_supabase(user_id: int, file_type: str, file_name: str, local_path: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Supabase Storage"""
    if not supabase:
        return False
    
    try:
        source_path = f"{user_id}/{file_type}/{file_name}"
        res = supabase.storage.from_(UPLOADS_BUCKET).download(source_path)
        
        with open(local_path, 'wb') as f:
            f.write(res)
        
        logger.info(f"File {source_path} downloaded from Supabase to {local_path}")
        return True
    except Exception as e:
        logger.error(f"Error downloading file from Supabase: {e}")
        return False

async def get_user_tries(user_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞"""
    if user_id in FREE_USERS:
        return 100

    tries = await supabase_api.check_and_update_access(user_id)
    return tries if tries is not None else 0

async def is_processing(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    if not os.path.exists(user_dir):
        return False
        
    photos = [
        f for f in os.listdir(user_dir)
        if f.startswith("photo_") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
    ]
    model_selected = os.path.exists(os.path.join(user_dir, "selected_model.jpg"))
    
    return len(photos) >= 2 or (len(photos) >= 1 and model_selected)

async def send_initial_examples(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    try:
        media = [
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=1013DE2SDg8u0V69ePxTYki2WWSNaGWVi"),
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=1010hYD1PjCQX-hZQAfRPigkLyz1PAaCH"),
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=104v4mW-4-HIH40RIg9-L86sTPWQsxCEF")
        ]
        await bot.send_media_group(chat_id, media=media)
        logger.info(f"–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await bot.send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

async def get_examples_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ primery –≤ Supabase"""
    if not supabase:
        logger.warning("Supabase client not available")
        return []
    
    try:
        res = supabase.storage.from_(EXAMPLES_BUCKET).list()
        logger.info(f"Supabase storage response for examples: {res}")
        
        if not res:
            logger.warning("No examples found")
            return []
            
        examples = [
            file['name'] for file in res 
            if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
        ]
        
        logger.info(f"Found {len(examples)} examples")
        return examples
        
    except Exception as e:
        logger.error(f"Error getting examples list: {str(e)}", exc_info=True)
        return []

async def send_examples_page(chat_id: int, page: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    try:
        examples = await get_examples_list()
        if not examples:
            await bot.send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        start_idx = page * EXAMPLES_PER_PAGE
        end_idx = start_idx + EXAMPLES_PER_PAGE
        current_examples = examples[start_idx:end_idx]
        
        if not current_examples:
            await bot.send_message(chat_id, "‚úÖ –≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã.")
            return
            
        media = []
        for example in current_examples:
            try:
                image_url = supabase.storage.from_(EXAMPLES_BUCKET).get_public_url(example)
                media.append(InputMediaPhoto(media=image_url))
            except Exception as e:
                logger.error(f"Error loading example {example}: {e}")
                continue
        
        if media:
            await bot.send_media_group(chat_id, media=media)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard_buttons = []
            
            if end_idx < len(examples):
                keyboard_buttons.append(
                    InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data=f"more_examples_{page + 1}")
                )
            
            keyboard_buttons.append(
                InlineKeyboardButton(text="–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])
            
            await bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error sending examples: {e}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_models_list(category: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not supabase:
        logger.warning("Supabase client not available")
        return []
    
    try:
        res = supabase.storage.from_(MODELS_BUCKET).list(category)
        logger.info(f"Supabase storage response for {category}: {res}")
        
        if not res:
            logger.warning(f"No files found in {category} category")
            return []
            
        models = [
            file['name'] for file in res 
            if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
        ]
        
        logger.info(f"Found {len(models)} models in {category} category")
        return models
        
    except Exception as e:
        logger.error(f"Error getting models list for {category}: {str(e)}", exc_info=True)
        return []

async def notify_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ADMIN_CHAT_ID:
        return
        
    try:
        await bot.send_message(ADMIN_CHAT_ID, message)
    except Exception as e:
        logger.error(f"Error sending admin notification: {e}")

async def send_welcome(user_id: int, username: str, full_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞
        await send_initial_examples(user_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë´ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="choose_model")],
            [InlineKeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="view_examples_0")]
        ])
        
        await bot.send_message(
            user_id,
            "<b>–í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø</b>\n\n"
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–µ–∂–¥—ã.\n\n"
            "üìå <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b> \n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ ‚Äì –æ–¥–µ–∂–¥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ)\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ ‚Äì —á–µ–ª–æ–≤–µ–∫ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, 1 —Ñ–æ—Ç–æ) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å \n"
            "üëÜ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "üåà <b>–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏!!</b> \n\n"
            "üî¥ <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏!!!</b> \n\n" 
            "üîî –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é –æ–¥–µ–∂–¥—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ (–≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –æ–¥–µ–∂–¥—ã) –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É - –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–∞—Ç–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ 2-–æ–µ —Ñ–æ—Ç–æ (–≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –æ–¥–µ–∂–¥—ã) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n" 
            "üì∏ <b>–û–¢–ü–†–ê–í–¨–¢–ï –ü–ï–†–í–û–ï –§–û–¢–û (–æ–¥–µ–∂–¥–∞), –ñ–î–£!!!:</b>",
            reply_markup=keyboard
        )
        
        await supabase_api.reset_flags(user_id)
        
        await supabase_api.upsert_row(user_id, username, {
            "status": "started",
            "photo_clothes": False,
            "photo_person": False,
            "model_selected": None,
            "tries_left": await get_user_tries(user_id)
        }) 
        
        await notify_admin(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({user_id})")
        
    except Exception as e:
        logger.error(f"Welcome error for {user_id}: {e}")

@dp.message(Command("start"))
@dp.message(F.text & ~F.text.regexp(r'^\d+$'))
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if await is_processing(message.from_user.id):
        await message.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\nüîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        return
        
    await send_welcome(
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )

@dp.callback_query(F.data == "choose_model")
async def choose_model(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω—ã", callback_data="models_man_0")],
            [InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω—ã", callback_data="models_woman_0")],
            [InlineKeyboardButton(text="üßí –î–µ—Ç–∏", callback_data="models_child_0")]
        ])
        
        await callback_query.message.answer(
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in choose_model: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("models_"))
async def show_category_models(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    data_parts = callback_query.data.split("_")
    if len(data_parts) != 3:
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", show_alert=True)
        return
        
    category = data_parts[1]
    page = int(data_parts[2])
    
    category_names = {
        "man": "üë® –ú—É–∂—Å–∫–∏–µ –º–æ–¥–µ–ª–∏",
        "woman": "üë© –ñ–µ–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏", 
        "child": "üßí –î–µ—Ç—Å–∫–∏–µ –º–æ–¥–µ–ª–∏"
    }
    
    try:
        models = await get_models_list(category)
        logger.info(f"Models to display for {category}: {models}")
        
        if not models:
            await callback_query.message.answer(f"‚ùå –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
            return

        start_idx = page * MODELS_PER_PAGE
        end_idx = start_idx + MODELS_PER_PAGE
        current_models = models[start_idx:end_idx]
        
        if page == 0:
            await callback_query.message.answer(f"{category_names.get(category, '–ú–æ–¥–µ–ª–∏')}:")

        for model in current_models:
            model_name = os.path.splitext(model)[0]
            
            try:
                image_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{category}/{model}")
                
                await bot.send_photo(
                    chat_id=callback_query.from_user.id,
                    photo=image_url,
                    caption=f"–ú–æ–¥–µ–ª—å: {model_name}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å",
                                    callback_data=f"model_{category}/{model}"
                                )
                            ]
                        ]
                    )
                )
            except Exception as e:
                logger.error(f"Error displaying model {model}: {e}")
                continue

        if end_idx < len(models):
            await callback_query.message.answer(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –º–æ–¥–µ–ª–∏?",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ",
                                callback_data=f"models_{category}_{page + 1}"
                            )
                        ]
                    ]
                )
            )
        else:
            await callback_query.message.answer("‚úÖ –≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    except Exception as e:
        logger.error(f"Error in show_category_models: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("model_"))
async def model_selected(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    model_path = callback_query.data.replace("model_", "")
    category, model_name = model_path.split('/')
    user_id = callback_query.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    
    try:
        await callback_query.message.delete()
        
        clothes_photo_exists = any(
            f.startswith("photo_1") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
            for f in os.listdir(user_dir)
        )

        model_display_name = os.path.splitext(model_name)[0]
        await supabase_api.upsert_row(user_id, callback_query.from_user.username, {
            "model_selected": model_path,
            "status": "model_selected"
        })
        
        if supabase:
            try:
                model_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{model_path}")
                
                model_path_local = os.path.join(user_dir, "selected_model.jpg")
                with open(model_path_local, 'wb') as f:
                    res = supabase.storage.from_(MODELS_BUCKET).download(f"{model_path}")
                    f.write(res)
                logger.info(f"Model {model_path} downloaded successfully")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ Supabase –≤ –ø–∞–ø–∫—É uploads
                await upload_to_supabase(model_path_local, user_id, "models")
                
                if clothes_photo_exists:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n"
                        "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                    )
                    await supabase_api.upsert_row(user_id, callback_query.from_user.username, {
                        "photo_person": True,
                        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                        "photo1_received": True,
                        "photo2_received": True,
                        "last_try_date": time.strftime("%Y-%m-%d %H:%M:%S")
                    })
                    
                    if user_id not in FREE_USERS:
                        await supabase_api.decrement_tries(user_id)
                    
                    await notify_admin(f"üì∏ –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç @{callback_query.from_user.username} ({user_id})")
                else:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã."
                    )
                    await supabase_api.upsert_row(user_id, callback_query.from_user.username, {
                        "photo1_received": False,
                        "photo2_received": True
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–º—ã–π –Ω–∏–∑
                await bot.send_photo(
                    chat_id=user_id,
                    photo=model_url,
                    caption=response_text
                )
                
            except Exception as e:
                logger.error(f"Error downloading model: {e}")
                await bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é."
                )
                return
            
    except Exception as e:
        logger.error(f"Error in model_selected: {e}")
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query(F.data.startswith("view_examples_"))
async def view_examples(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç"""
    try:
        page = int(callback_query.data.split("_")[-1])
        await send_examples_page(callback_query.from_user.id, page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in view_examples: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await send_welcome(
            callback_query.from_user.id,
            callback_query.from_user.username,
            callback_query.from_user.full_name
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in back_to_menu: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data.startswith("more_examples_"))
async def more_examples(callback_query: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    try:
        page = int(callback_query.data.split("_")[-1])
        await send_examples_page(callback_query.from_user.id, page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in more_examples: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user = message.from_user
    user_id = user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    
    try:
        if user_id in FREE_USERS:
            await process_photo(message, user, user_dir)
            return
            
        tries_left = await get_user_tries(user_id)
        
        if tries_left <= 0:
            await show_payment_options(user)
            return
            
        await process_photo(message, user, user_dir)
        
    except Exception as e:
        logger.error(f"Error handling photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def show_payment_options(user: types.User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"""
    payment_instructions = (
        "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
        "üìå <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É:</b>\n\n"
        "1. <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã.\n"
        "2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂.\n"
        "3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.\n\n"
        "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        f"- 30 —Ä—É–± = 1 –ø—Ä–∏–º–µ—Ä–∫–∞\n"
        f"- 60 —Ä—É–± = 2 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
        f"- 90 —Ä—É–± = 3 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
        "–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ..."
    )
    
    await bot.send_message(
        user.id,
        payment_instructions,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", 
                    callback_data="check_access"
                )
            ]
        ])
    )
async def check_payment_changes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    while True:
        try:
            logger.info("üîç Checking for payment changes...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º payment_amount
            res = supabase.table(USERS_TABLE)\
                .select("user_id, username, payment_amount, tries_left")\
                .neq("payment_amount", 0)\
                .execute()
            
            if not res.data:
                await asyncio.sleep(10)
                continue
            
            for user_data in res.data:
                user_id = int(user_data['user_id'])
                current_amount = float(user_data['payment_amount'])
                current_tries = int(user_data['tries_left'])
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–µ—à–∞
                prev_state = supabase_api.user_states.get(user_id, {})
                prev_amount = prev_state.get('payment_amount', 0)
                prev_tries = prev_state.get('tries_left', 0)
                
                # –ï—Å–ª–∏ —Å—É–º–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                if current_amount != prev_amount or current_tries != prev_tries:
                    logger.info(f"üí∞ Payment change detected for user {user_id}: "
                              f"amount {prev_amount}->{current_amount}, "
                              f"tries {prev_tries}->{current_tries}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    supabase_api.user_states[user_id] = {
                        'payment_amount': current_amount,
                        'tries_left': current_tries
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    try:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await bot.send_message(
                            user_id,
                            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
                            f"–°—É–º–º–∞: {current_amount} —Ä—É–±.\n"
                            f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {current_tries}"
                        )
                        
                        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        if ADMIN_CHAT_ID:
                            await bot.send_message(
                                ADMIN_CHAT_ID,
                                f"üîÑ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_data['username']} ({user_id}) –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
                                f"–°—É–º–º–∞: {current_amount} —Ä—É–±.\n"
                                f"–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {current_tries}"
                            )
                    except Exception as e:
                        logger.error(f"Error sending payment change notification: {e}")
            
            await asyncio.sleep(10)
            
        except Exception as e:
            logger.error(f"Error in check_payment_changes: {e}")
            await asyncio.sleep(30)

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞ ...

async def check_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("üîÑ Starting check_results() loop...")
    while True:
        try:
            logger.info("üîç Scanning for results...")

            if not os.path.exists(UPLOAD_DIR):
                logger.warning(f"Directory {UPLOAD_DIR} does not exist!")
                await asyncio.sleep(10)
                continue

            for user_id_str in os.listdir(UPLOAD_DIR):
                user_dir = os.path.join(UPLOAD_DIR, user_id_str)
                if not os.path.isdir(user_dir):
                    continue

                logger.info(f"üìÅ Checking user dir: {user_dir}")

                # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_files = [
                    f for f in os.listdir(user_dir)
                    if f.startswith("result") and f.lower().endswith(tuple(SUPPORTED_EXTENSIONS))
                ]

                if not result_files:
                    await asyncio.sleep(5)
                    continue

                result_file = os.path.join(user_dir, result_files[0])
                user_id = int(user_id_str)

                try:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    photo = FSInputFile(result_file)
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption="üéâ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!"
                    )

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if ADMIN_CHAT_ID:
                        user_info = await supabase_api.get_user_row(user_id)
                        username = user_info.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user_info else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        
                        await bot.send_message(
                            ADMIN_CHAT_ID,
                            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ—Ä–∫–∏"
                        )

                    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase
                    file_ext = os.path.splitext(result_file)[1].lower()
                    supabase_path = f"{user_id_str}/results/result_{int(time.time())}{file_ext}"
                    
                    with open(result_file, 'rb') as f:
                        supabase.storage.from_(UPLOADS_BUCKET).upload(
                            path=supabase_path,
                            file=f,
                            file_options={"content-type": "image/jpeg" if file_ext in ('.jpg', '.jpeg') else
                                      "image/png" if file_ext == '.png' else
                                      "image/webp"}
                        )

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await supabase_api.upsert_row(user_id, "", {
                        "status": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                        "result_sent": True,
                        "ready": True,
                        "result_url": supabase_path
                    })

                    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    try:
                        shutil.rmtree(user_dir)
                        logger.info(f"üóëÔ∏è –ü–∞–ø–∫–∞ {user_dir} —É–¥–∞–ª–µ–Ω–∞")
                    except Exception as e:
                        logger.error(f"Error cleaning up user dir: {e}")

                except Exception as e:
                    logger.error(f"Error processing result for user {user_id}: {e}")
                    continue

            await asyncio.sleep(30)

        except Exception as e:
            logger.error(f"Critical error in check_results: {e}")
            await asyncio.sleep(30)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        await start_web_server()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        webhook_url = f"https://virtual-tryon-bot.onrender.com/{BOT_TOKEN.split(':')[1]}"
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
        )
        logger.info(f"Webhook set to: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(check_results())
        asyncio.create_task(supabase_api.check_payment_changes())
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
            
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by keyboard interrupt")
        
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
        
    finally:
        loop.run_until_complete(on_shutdown())
        loop.close()
        logger.info("Bot successfully shut down")