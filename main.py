import os
import logging
import asyncio
import aiohttp
import shutil
import time
import sys
if sys.platform == "linux":
    import fcntl
    try:
        fcntl.flock(sys.stdout, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        logger.error("Another instance is already running. Exiting.")
        sys.exit(1)
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv
from aiohttp import web
from supabase.lib.client_options import ClientOptions
from urllib.parse import quote

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
PRICE_PER_TRY = 30  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –ø—Ä–∏–º–µ—Ä–∫—É –≤ —Ä—É–±–ª—è—Ö
UPLOAD_DIR = "uploads"
MODELS_BUCKET = "models"
EXAMPLES_BUCKET = "primery"
UPLOADS_BUCKET = "uploads"  # –ë–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
SUPPORTED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.webp'}
MODELS_PER_PAGE = 3
EXAMPLES_PER_PAGE = 3
DONATION_ALERTS_TOKEN = os.getenv("DONATION_ALERTS_TOKEN", "").strip()
PORT = int(os.getenv("PORT", 4000))
DONATION_ALERTS_USERNAME = "primerochnay777"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è DonationAlerts

# –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ Supabase
USERS_TABLE = "users"
ACCESS_FIELD = "access_granted"
AMOUNT_FIELD = "payment_amount"
TRIES_FIELD = "tries_left"
STATUS_FIELD = "status"
FREE_TRIES_FIELD = "free_tries_used"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
os.makedirs(UPLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
try:
    client_options = ClientOptions(postgrest_client_timeout=None)
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY, options=client_options)
    logger.info("Supabase client initialized successfully")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        res = supabase.table(USERS_TABLE).select("*").limit(1).execute()
        logger.info(f"Users table exists with {len(res.data)} records")
    except Exception as e:
        logger.error(f"Users table check failed: {e}")
        raise Exception("Users table not found in Supabase")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∫–µ—Ç–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    try:
        buckets = supabase.storage.list_buckets()
        logger.info(f"Available buckets: {buckets}")
        
        required_buckets = [MODELS_BUCKET, EXAMPLES_BUCKET, UPLOADS_BUCKET]
        for bucket in required_buckets:
            if bucket not in [b.name for b in buckets]:
                logger.error(f"Bucket '{bucket}' not found in Supabase storage")
                raise Exception(f"Required bucket '{bucket}' not found")
    except Exception as e:
        logger.error(f"Error checking buckets: {e}")
        raise

except Exception as e:
    logger.error(f"Failed to initialize Supabase: {e}")
    raise

class SupabaseAPI:
    def __init__(self):
        self.supabase = supabase
        self.last_payment_amounts = {}  # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–ª–∞—Ç–µ–∂–µ–π
        self.last_tries_values = {}     # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–º–µ—Ä–æ–∫

    async def get_user_row(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase"""
        try:
            res = self.supabase.table(USERS_TABLE)\
                .select("*")\
                .eq("user_id", str(user_id))\
                .execute()
            
            if res.data and len(res.data) > 0:
                return res.data[0]
            return None
        except Exception as e:
            logger.error(f"Error getting user row: {e}")
            return None

    async def update_user_row(self, user_id: int, data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
        try:
            res = self.supabase.table(USERS_TABLE)\
                .update(data)\
                .eq("user_id", str(user_id))\
                .execute()
            
            return res.data[0] if res.data else None
        except Exception as e:
            logger.error(f"Error updating user row: {e}")
            return None

    async def check_and_update_access(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫"""
        try:
            row = await self.get_user_row(user_id)
            if not row:
                return 0

            payment_amount = float(row.get(AMOUNT_FIELD, 0)) if row.get(AMOUNT_FIELD) else 0.0
            tries_left = int(row.get(TRIES_FIELD, 0)) if row.get(TRIES_FIELD) else 0
            free_tries_used = bool(row.get(FREE_TRIES_FIELD, False))

            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–ª–∞—Ç–∞, –Ω–æ –¥–æ—Å—Ç—É–ø –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            if payment_amount > 0 and not row.get(ACCESS_FIELD, False):
                tries_left = int(payment_amount / PRICE_PER_TRY)
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: True,
                    TRIES_FIELD: tries_left,
                    STATUS_FIELD: "–û–ø–ª–∞—á–µ–Ω–æ"
                })
                return tries_left

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            if not free_tries_used and payment_amount == 0:
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: True,
                    TRIES_FIELD: 1,
                    STATUS_FIELD: "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                    FREE_TRIES_FIELD: True
                })
                return 1

            if not row.get(ACCESS_FIELD, False):
                return 0

            if tries_left <= 0:
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: False,
                    STATUS_FIELD: "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                })
                return 0

            return tries_left

        except Exception as e:
            logger.error(f"Error in check_and_update_access: {e}")
            return None

    async def decrement_tries(self, user_id: int):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫ –Ω–∞ 1 –∏ –≤—ã—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Å—É–º–º—ã"""
        try:
            row = await self.get_user_row(user_id)
            if not row:
                return False

            tries_left = int(row.get(TRIES_FIELD, 0)) if row.get(TRIES_FIELD) else 0
            amount = float(row.get(AMOUNT_FIELD, 0)) if row.get(AMOUNT_FIELD) else 0.0
            free_tries_used = bool(row.get(FREE_TRIES_FIELD, False))

            new_tries = max(0, tries_left - 1)
            
            # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –≤—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É
            if free_tries_used and amount == 0 and tries_left == 1:
                new_amount = 0.0
            else:
                new_amount = max(0, amount - PRICE_PER_TRY)

            update_data = {
                TRIES_FIELD: new_tries,
                AMOUNT_FIELD: new_amount,
                "last_try_date": time.strftime("%Y-%m-%d %H:%M:%S")
            }

            if new_tries <= 0:
                update_data[ACCESS_FIELD] = False
                update_data[STATUS_FIELD] = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

            updated = await self.update_user_row(user_id, update_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∞–Ω–∏–∏
            if updated:
                await self.send_payment_update_notifications(user_id, new_amount, new_tries, "–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø—Ä–∏–º–µ—Ä–∫—É")
            
            return updated is not None

        except Exception as e:
            logger.error(f"Error decrementing tries: {e}")
            return False

    async def send_payment_update_notifications(self, user_id: int, new_amount: float, new_tries: int, reason: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_row = await self.get_user_row(user_id)
            if not user_row:
                return

            username = user_row.get('username', '')
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    user_id,
                    f"üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"üí≥ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {new_amount} —Ä—É–±.\n"
                    f"üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {new_tries}"
                )
            except Exception as e:
                logger.error(f"Error sending payment update to user: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if ADMIN_CHAT_ID:
                try:
                    await bot.send_message(
                        ADMIN_CHAT_ID,
                        f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É @{username} ({user_id})\n"
                        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                        f"üí≥ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {new_amount} —Ä—É–±.\n"
                        f"üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: {new_tries}"
                    )
                except Exception as e:
                    logger.error(f"Error sending admin payment notification: {e}")
                    
        except Exception as e:
            logger.error(f"Error in send_payment_update_notifications: {e}")

    async def upsert_row(self, user_id: int, username: str, data: dict):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
        try:
            row = await self.get_user_row(user_id)
            data.update({
                "user_id": str(user_id),
                "username": username or "",
                "updated_at": time.strftime("%Y-%m-%d %H:%M:%S")
            })

            if row:
                res = self.supabase.table(USERS_TABLE)\
                    .update(data)\
                    .eq("user_id", str(user_id))\
                    .execute()
                result = res.data[0] if res.data else None
            else:
                data["created_at"] = time.strftime("%Y-%m-%d %H:%M:%S")
                res = self.supabase.table(USERS_TABLE)\
                    .insert(data)\
                    .execute()
                result = res.data[0] if res.data else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
            if 'payment_amount' in data and data['payment_amount'] > 0:
                payment_amount = data['payment_amount']
                tries_left = int(payment_amount / PRICE_PER_TRY)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.last_payment_amounts[user_id] = payment_amount
                self.last_tries_values[user_id] = tries_left
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self.send_payment_update_notifications(
                    user_id, 
                    payment_amount, 
                    tries_left, 
                    "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                await self.update_user_row(user_id, {
                    ACCESS_FIELD: True,
                    TRIES_FIELD: tries_left,
                    STATUS_FIELD: "–û–ø–ª–∞—á–µ–Ω–æ",
                    FREE_TRIES_FIELD: True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
                })
            
            return result
        except Exception as e:
            logger.error(f"Error in upsert_row: {e}")
            return None

    async def reset_flags(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return await self.update_user_row(user_id, {
                "photo1_received": False,
                "photo2_received": False,
                "ready": False
            }) is not None
        except Exception as e:
            logger.error(f"Error resetting flags: {e}")
            return False

    async def initialize_user(self, user_id: int, username: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            user_row = await self.get_user_row(user_id)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            if not user_row:
                await self.upsert_row(user_id, username, {
                    AMOUNT_FIELD: 0.0,
                    TRIES_FIELD: 0,
                    ACCESS_FIELD: False,
                    STATUS_FIELD: "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
                    FREE_TRIES_FIELD: False
                })
                
                logger.info(f"Initialized user {user_id} with zero balance")
            
        except Exception as e:
            logger.error(f"Error initializing user: {e}")

supabase_api = SupabaseAPI()

async def cleanup_resources():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    logger.info("Cleaning up resources...")
    
    if 'session' in globals():
        await session.close()
    
    await bot.session.close()
    
    logger.info("All resources cleaned up")

async def on_shutdown():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    try:
        logger.info("Shutting down...")
        
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
        
        await asyncio.gather(*tasks, return_exceptions=True)
        
        await bot.delete_webhook()
        logger.info("Webhook removed")
        
        await cleanup_resources()
        
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    finally:
        logger.info("Bot successfully shut down")

async def upload_to_supabase(file_path: str, user_id: int, file_type: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage"""
    if not supabase:
        return False
    
    try:
        file_name = os.path.basename(file_path)
        destination_path = f"{user_id}/{file_type}/{file_name}"
        
        with open(file_path, 'rb') as f:
            res = supabase.storage.from_(UPLOADS_BUCKET).upload(
                path=destination_path,
                file=f,
                file_options={"content-type": "image/jpeg"}
            )
        
        logger.info(f"File {file_path} uploaded to Supabase as {destination_path}")
        return True
    except Exception as e:
        logger.error(f"Error uploading file to Supabase: {e}")
        return False

async def download_from_supabase(user_id: int, file_type: str, file_name: str, local_path: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Supabase Storage"""
    if not supabase:
        return False
    
    try:
        source_path = f"{user_id}/{file_type}/{file_name}"
        res = supabase.storage.from_(UPLOADS_BUCKET).download(source_path)
        
        with open(local_path, 'wb') as f:
            f.write(res)
        
        logger.info(f"File {source_path} downloaded from Supabase to {local_path}")
        return True
    except Exception as e:
        logger.error(f"Error downloading file from Supabase: {e}")
        return False

async def get_user_tries(user_id: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞"""
    tries = await supabase_api.check_and_update_access(user_id)
    return tries if tries is not None else 0

async def is_processing(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    if not os.path.exists(user_dir):
        return False
        
    photos = [
        f for f in os.listdir(user_dir)
        if f.startswith("photo_") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
    ]
    model_selected = os.path.exists(os.path.join(user_dir, "selected_model.jpg"))
    
    return len(photos) >= 2 or (len(photos) >= 1 and model_selected)

async def send_initial_examples(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    try:
        media = [
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=1013DE2SDg8u0V69ePxTYki2WWSNaGWVi"),
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=1010hYD1PjCQX-hZQAfRPigkLyz1PAaCH"),
            InputMediaPhoto(media="https://drive.google.com/uc?export=download&id=104v4mW-4-HIH40RIg9-L86sTPWQsxCEF")
        ]
        await bot.send_media_group(chat_id, media=media)
        logger.info(f"–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await bot.send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

async def get_examples_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ primery –≤ Supabase"""
    if not supabase:
        logger.warning("Supabase client not available")
        return []
    
    try:
        res = supabase.storage.from_(EXAMPLES_BUCKET).list()
        logger.info(f"Supabase storage response for examples: {res}")
        
        if not res:
            logger.warning("No examples found")
            return []
            
        examples = [
            file['name'] for file in res 
            if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
        ]
        
        logger.info(f"Found {len(examples)} examples")
        return examples
        
    except Exception as e:
        logger.error(f"Error getting examples list: {str(e)}", exc_info=True)
        return []

async def send_examples_page(chat_id: int, page: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    try:
        examples = await get_examples_list()
        if not examples:
            await bot.send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        start_idx = page * EXAMPLES_PER_PAGE
        end_idx = start_idx + EXAMPLES_PER_PAGE
        current_examples = examples[start_idx:end_idx]
        
        if not current_examples:
            await bot.send_message(chat_id, "‚úÖ –≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã.")
            return
            
        media = []
        for example in current_examples:
            try:
                image_url = supabase.storage.from_(EXAMPLES_BUCKET).get_public_url(example)
                media.append(InputMediaPhoto(media=image_url))
            except Exception as e:
                logger.error(f"Error loading example {example}: {e}")
                continue
        
        if media:
            await bot.send_media_group(chat_id, media=media)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard_buttons = []
            
            if end_idx < len(examples):
                keyboard_buttons.append(
                    InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data=f"more_examples_{page + 1}")
                )
            
            keyboard_buttons.append(
                InlineKeyboardButton(text="–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])
            
            await bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error sending examples: {e}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_models_list(category: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not supabase:
        logger.warning("Supabase client not available")
        return []
    
    try:
        res = supabase.storage.from_(MODELS_BUCKET).list(category)
        logger.info(f"Supabase storage response for {category}: {res}")
        
        if not res:
            logger.warning(f"No files found in {category} category")
            return []
            
        models = [
            file['name'] for file in res 
            if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)
        ]
        
        logger.info(f"Found {len(models)} models in {category} category")
        return models
        
    except Exception as e:
        logger.error(f"Error getting models list for {category}: {str(e)}", exc_info=True)
        return []

async def notify_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ADMIN_CHAT_ID:
        return
        
    try:
        await bot.send_message(ADMIN_CHAT_ID, message)
    except Exception as e:
        logger.error(f"Error sending admin notification: {e}")

async def send_welcome(user_id: int, username: str, full_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await supabase_api.initialize_user(user_id, username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä–∞
        await send_initial_examples(user_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëï –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–µ–∂–¥—É", callback_data="upload_clothes")],
            [InlineKeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="view_examples_0")]
        ])
        
        await bot.send_message(
            user_id,
            "<b>–í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø</b>\n\n"
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–µ–∂–¥—ã.\n\n"
            "üìå <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b> \n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ ‚Äì –æ–¥–µ–∂–¥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ)\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ ‚Äì —á–µ–ª–æ–≤–µ–∫ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, 1 —Ñ–æ—Ç–æ) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å \n"
            "üëÜ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "üåà <b>–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏!!</b> \n\n"
            "üî¥ <b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏!!!</b> \n\n" 
            "üîî –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∏ –Ω–∏–∂–Ω—é—é –æ–¥–µ–∂–¥—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ (–≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –æ–¥–µ–∂–¥—ã) –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É - –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–∞—Ç–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ 2-–æ–µ —Ñ–æ—Ç–æ (–≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –æ–¥–µ–∂–¥—ã) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n" 
            "üëá <b>–ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã:</b>",
            reply_markup=keyboard
        )
        
        await supabase_api.reset_flags(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        tries_left = await get_user_tries(user_id)
        
        await supabase_api.upsert_row(user_id, username, {
            "status": "started",
            "photo_clothes": False,
            "photo_person": False,
            "model_selected": None,
            "tries_left": tries_left
        }) 
        
        await notify_admin(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({user_id})")
        
    except Exception as e:
        logger.error(f"Welcome error for {user_id}: {e}")

@dp.message(Command("start"))
@dp.message(F.text & ~F.text.regexp(r'^\d+$'))
async def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if await is_processing(message.from_user.id):
        await message.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\nüîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        return
        
    await send_welcome(
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )

@dp.callback_query(F.data == "upload_clothes")
async def upload_clothes_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–µ–∂–¥—ã"""
    try:
        await callback_query.message.answer(
            "üëï –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–µ–∂–¥—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –°–∫—Ä–µ–ø–∫—É, "
            "–∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏."
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in upload_clothes_handler: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data == "choose_model")
async def choose_model(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω—ã", callback_data="models_man_0")],
            [InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω—ã", callback_data="models_woman_0")],
            [InlineKeyboardButton(text="üßí –î–µ—Ç–∏", callback_data="models_child_0")]
        ])
        
        await callback_query.message.answer(
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
            reply_markup=keyboard
        )
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Error in choose_model: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data.startswith("models_"))
async def show_category_models(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    data_parts = callback_query.data.split("_")
    if len(data_parts) != 3:
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", show_alert=True)
        return
        
    category = data_parts[1]
    page = int(data_parts[2])
    
    category_names = {
        "man": "üë® –ú—É–∂—Å–∫–∏–µ –º–æ–¥–µ–ª–∏",
        "woman": "üë© –ñ–µ–Ω—Å–∫–∏–µ –º–æ–¥–µ–ª–∏", 
        "child": "üßí –î–µ—Ç—Å–∫–∏–µ –º–æ–¥–µ–ª–∏"
    }
    
    try:
        models = await get_models_list(category)
        logger.info(f"Models to display for {category}: {models}")
        
        if not models:
            await callback_query.message.answer(f"‚ùå –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
            await callback_query.answer()
            return

        start_idx = page * MODELS_PER_PAGE
        end_idx = start_idx + MODELS_PER_PAGE
        current_models = models[start_idx:end_idx]
        
        if page == 0:
            await callback_query.message.answer(f"{category_names.get(category, '–ú–æ–¥–µ–ª–∏')}:")
            await callback_query.answer()

        for model in current_models:
            model_name = os.path.splitext(model)[0]
            
            try:
                image_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{category}/{model}")
                
                await bot.send_photo(
                    chat_id=callback_query.from_user.id,
                    photo=image_url,
                    caption=f"–ú–æ–¥–µ–ª—å: {model_name}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å",
                                    callback_data=f"model_{category}/{model}"
                                )
                            ]
                        ]
                    )
                )
            except Exception as e:
                logger.error(f"Error displaying model {model}: {e}")
                continue

        if end_idx < len(models):
            await callback_query.message.answer(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –º–æ–¥–µ–ª–∏?",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ",
                                callback_data=f"models_{category}_{page + 1}"
                            )
                        ]
                    ]
                )
            )
            await callback_query.answer()
        else:
            await callback_query.message.answer("‚úÖ –≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await callback_query.answer()

    except Exception as e:
        logger.error(f"Error in show_category_models: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data.startswith("model_"))
async def model_selected(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–∫
    tries_left = await get_user_tries(user_id)
    if tries_left <= 0:
        await show_payment_options(callback_query.from_user)
        await callback_query.answer()
        return
        
    if await is_processing(user_id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    model_path = callback_query.data.replace("model_", "")
    category, model_name = model_path.split('/')
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    
    try:
        await callback_query.message.delete()
        
        clothes_photo_exists = any(
            f.startswith("photo_1") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
            for f in os.listdir(user_dir)
        )

        model_display_name = os.path.splitext(model_name)[0]
        await supabase_api.upsert_row(user_id, callback_query.from_user.username, {
            "model_selected": model_path,
            "status": "model_selected"
        })
        
        if supabase:
            try:
                model_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{model_path}")
                
                model_path_local = os.path.join(user_dir, "selected_model.jpg")
                with open(model_path_local, 'wb') as f:
                    res = supabase.storage.from_(MODELS_BUCKET).download(f"{model_path}")
                    f.write(res)
                logger.info(f"Model {model_path} downloaded successfully")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ Supabase –≤ –ø–∞–ø–∫—É uploads
                await upload_to_supabase(model_path_local, user_id, "models")
                
                if clothes_photo_exists:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n"
                        "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                    )
                    await supabase_api.upsert_row(user_id, callback_query.from_user.username, {
                        "photo_person": True,
                        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                        "photo1_received": True,
                        "photo2_received": True,
                        "last_try_date": time.strftime("%Y-%m-%d %H:%M:%S")
                    })
                    
                    await supabase_api.decrement_tries(user_id)
                    
                    await notify_admin(f"üì∏ –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç @{callback_query.from_user.username} ({user_id})")
                else:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã."
                    )
                    await supabase_api.upsert_row(user_id, callback_query.from_user.username, {
                        "photo1_received": False,
                        "photo2_received": True
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–º—ã–π –Ω–∏–∑
                await bot.send_photo(
                    chat_id=user_id,
                    photo=model_url,
                    caption=response_text
                )
                await callback_query.answer()
                
            except Exception as e:
                logger.error(f"Error downloading model: {e}")
                await bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é."
                )
                await callback_query.answer()
                return
            
    except Exception as e:
        logger.error(f"Error in model_selected: {e}")
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()

@dp.callback_query(F.data.startswith("view_examples_"))
async def view_examples(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç"""
    try:
        page = int(callback_query.data.split("_")[-1])
        await send_examples_page(callback_query.from_user.id, page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in view_examples: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await send_welcome(
            callback_query.from_user.id,
            callback_query.from_user.username,
            callback_query.from_user.full_name
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in back_to_menu: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data.startswith("more_examples_"))
async def more_examples(callback_query: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    try:
        page = int(callback_query.data.split("_")[-1])
        await send_examples_page(callback_query.from_user.id, page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in more_examples: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

async def process_photo(message: types.Message, user: types.User, user_dir: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        user_id = user.id
        user_dir = os.path.join(UPLOAD_DIR, str(user_id))
        os.makedirs(user_dir, exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ (–æ–¥–µ–∂–¥–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫)
        existing_photos = [
            f for f in os.listdir(user_dir)
            if f.startswith("photo_") and f.endswith(tuple(SUPPORTED_EXTENSIONS))
        ]

        if not existing_photos:
            # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ - –æ–¥–µ–∂–¥–∞
            photo_type = 1
            filename = f"photo_1{os.path.splitext(file_path)[1]}"
            caption = "‚úÖ –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="upload_person"),
                    InlineKeyboardButton(text="üë´ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="choose_model")
                ]
            ])
        else:
            # –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ - —á–µ–ª–æ–≤–µ–∫
            photo_type = 2
            filename = f"photo_2{os.path.splitext(file_path)[1]}"
            caption = "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\nüîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            keyboard = None

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
            await notify_admin(f"üì∏ –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç @{user.username} ({user_id})")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
        local_path = os.path.join(user_dir, filename)
        await bot.download_file(file_path, local_path)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Supabase
        await upload_to_supabase(local_path, user_id, "photos")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å username
        user_row = await supabase_api.get_user_row(user_id)
        current_username = user_row.get('username', '') if user_row else (user.username or '')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è username
        if photo_type == 1:
            await supabase_api.upsert_row(user_id, current_username, {
                "photo1_received": True,
                "photo2_received": False,
                "status": "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞",
                "username": current_username  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
            })
        else:
            await supabase_api.upsert_row(user_id, current_username, {
                "photo1_received": True,
                "photo2_received": True,
                "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "last_try_date": time.strftime("%Y-%m-%d %H:%M:%S"),
                "username": current_username  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
            })

            await supabase_api.decrement_tries(user_id)

        if keyboard:
            await message.answer(caption, reply_markup=keyboard)
        else:
            await message.answer(caption)

    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        raise

@dp.callback_query(F.data == "upload_person")
async def upload_person_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞"""
    try:
        await callback_query.message.answer(
            "üë§ –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –°–∫—Ä–µ–ø–∫—É, "
            "–∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏."
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in upload_person_handler: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user = message.from_user
    user_id = user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)
    
    try:
        tries_left = await get_user_tries(user_id)
        
        if tries_left <= 0:
            await show_payment_options(user)
            return
            
        await process_photo(message, user, user_dir)
        
    except Exception as e:
        logger.error(f"Error handling photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def show_balance_info(user: types.User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        user_row = await supabase_api.get_user_row(user.id)
        
        if not user_row:
            await bot.send_message(user.id, "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
            
        payment_amount = float(user_row.get(AMOUNT_FIELD, 0)) if user_row.get(AMOUNT_FIELD) else 0.0
        tries_left = int(user_row.get(TRIES_FIELD, 0)) if user_row.get(TRIES_FIELD) else 0
        status = user_row.get(STATUS_FIELD, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        free_tries_used = bool(user_row.get(FREE_TRIES_FIELD, False))
        
        message_text = (
            "üí∞ <b>–ú–æ–π –±–∞–ª–∞–Ω—Å:</b>\n\n"
            f"üí≥ –°—É–º–º–∞ –Ω–∞ —Å—á–µ—Ç—É: <b>{payment_amount} —Ä—É–±.</b>\n"
            f"üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫: <b>{tries_left}</b>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
            f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <b>{'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞' if free_tries_used else '–¥–æ—Å—Ç—É–ø–Ω–∞'}</b>\n\n"
            f"‚ÑπÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏: <b>{PRICE_PER_TRY} —Ä—É–±.</b>"
        )
        
        await bot.send_message(
            user.id,
            message_text,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"Error showing balance info: {e}")
        await bot.send_message(
            user.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def show_payment_options(user: types.User):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ DonationAlerts"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è DonationAlerts (username –∏ ID)
        payment_message = f"–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–∏–º–µ—Ä–∫–∏ –æ—Ç @{user.username} (ID: {user.id})"
        encoded_message = quote(payment_message)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    url=f"https://www.donationalerts.com/r/{DONATION_ALERTS_USERNAME}?message={encoded_message}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –ú–æ–π –±–∞–ª–∞–Ω—Å",
                    callback_data="check_balance"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_menu"
                )
            ]
        ])
        
        payment_text = (
    "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
    "üìå <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É:</b>\n\n"
    "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'\n\n"
    "2Ô∏è‚É£ –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 30 —Ä—É–± (—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–æ–∫)\n\n"
    "‚ö†Ô∏è‚ÄºÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í –ø–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –æ–ø–ª–∞—Ç–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ:\n\n"
    "<b>–û–ü–õ–ê–¢–ê –ó–ê –ü–†–ò–ú–ï–†–ö–ò –û–¢ </code>@{user.username}</code> </b>\n\n"
    "ü§∑‚Äç‚ôÇÔ∏è–ò–Ω–∞—á–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ –∫–æ–º—É –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
    "<b>‚ÅâÔ∏è–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n\n"
    "–ü–∏—Å–∞—Ç—å –í–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
	"üëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëá\n"
    f"<code>–û–ü–õ–ê–¢–ê –ó–ê –ü–†–ò–ú–ï–†–ö–ò –æ—Ç @{user.username}</code>\n\n"
    "–í—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –æ–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
    "‚ÄºÔ∏è<b>–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–π—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏‚ÄºÔ∏è</b>\n\n"
    "3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–ö–∞—Ä—Ç–∞ –∏–ª–∏ –°–ë–ü)\n\n"
    "4Ô∏è‚É£ –í –ø–æ–ª–µ <b>e-mail</b> - —É–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é –ø–æ—á—Ç—É, –º–æ–∂–µ—Ç–µ —Å–≤–æ—é, –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥—É–º–∞—Ç—å(–Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è)\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: Maria@mail.ru\n\n"
    "üí•<b>–í–°–Å!!!</b>üí•\n\n"
    "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–ø–æ–∫–æ–π–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É –Ω–∞ —Ç—É —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤–Ω–µ—Å—ë—Ç–µ\n\n"
    "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n\n"
    f"- 30 —Ä—É–± = 1 –ø—Ä–∏–º–µ—Ä–∫–∞\n"
    f"- 60 —Ä—É–± = 2 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
    f"- 90 —Ä—É–± = 3 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
    "–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ...\n\n"
    "‚ùì–°–≤–æ–π –±–∞–ª–∞–Ω—Å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–æ–π –±–∞–ª–∞–Ω—Å'"
)
        await bot.send_message(
            user.id,
            payment_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã
        if ADMIN_CHAT_ID:
            try:
                await bot.send_message(
                    ADMIN_CHAT_ID,
                    f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} ({user.id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã\n"
                    f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è DonationAlerts: '–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–∏–º–µ—Ä–∫–∏ –æ—Ç @{user.username} (ID: {user.id})'"
                )
            except Exception as e:
                logger.error(f"Error sending admin payment notification: {e}")
                
    except Exception as e:
        logger.error(f"Error sending payment options: {e}")
        await bot.send_message(
            user.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

@dp.callback_query(F.data == "check_balance")
async def check_balance_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        await show_balance_info(callback_query.from_user)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in check_balance_handler: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

async def check_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("üîÑ Starting check_results() loop...")
    while True:
        try:
            logger.info("üîç Scanning for results...")

            if not os.path.exists(UPLOAD_DIR):
                logger.warning(f"Directory {UPLOAD_DIR} does not exist!")
                await asyncio.sleep(10)
                continue

            for user_id_str in os.listdir(UPLOAD_DIR):
                user_dir = os.path.join(UPLOAD_DIR, user_id_str)
                if not os.path.isdir(user_dir):
                    continue

                logger.info(f"üìÅ Checking user dir: {user_dir}")

                # –ò—â–µ–º result-—Ñ–∞–π–ª—ã —Å –ª—é–±—ã–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                result_files = [
                    f for f in os.listdir(user_dir)
                    if f.startswith("result") and f.lower().endswith(tuple(SUPPORTED_EXTENSIONS))
                ]

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ Supabase
                if not result_files:
                    for ext in SUPPORTED_EXTENSIONS:
                        try:
                            result_supabase_path = f"{user_id_str}/result{ext}"
                            result_file_local = os.path.join(user_dir, f"result{ext}")
                            os.makedirs(user_dir, exist_ok=True)

                            res = supabase.storage.from_(UPLOADS_BUCKET).download(result_supabase_path)
                            with open(result_file_local, 'wb') as f:
                                f.write(res)

                            logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω result{ext} –∏–∑ Supabase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
                            result_files = [f"result{ext}"]
                            break
                        except Exception as e:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å result{ext} –∏–∑ Supabase –¥–ª—è {user_id_str}: {e}")
                            continue

                # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                if result_files:
                    result_file = os.path.join(user_dir, result_files[0])

                    try:
                        user_id = int(user_id_str)

                        if not os.path.isfile(result_file) or not os.access(result_file, os.R_OK):
                            logger.warning(f"üö´ –§–∞–π–ª {result_file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
                            continue

                        if os.path.getsize(result_file) == 0:
                            logger.warning(f"üö´ –§–∞–π–ª {result_file} –ø—É—Å—Ç")
                            continue

                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user_id}")

                        photo = FSInputFile(result_file)
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É",
                                        callback_data="continue_tryon"
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                        callback_data="show_payment_options"
                                    ),
                                    InlineKeyboardButton(
                                        text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å",
                                        callback_data="check_balance"
                                    )
                                ]
                            ]
                        )

                        await bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption="üéâ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!",
                            reply_markup=keyboard
                        )

                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å username
                        user_row = await supabase_api.get_user_row(user_id)
                        current_username = user_row.get('username', '') if user_row.get('username') else ''

                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        if ADMIN_CHAT_ID:
                            try:
                                await bot.send_message(
                                    ADMIN_CHAT_ID,
                                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{current_username} ({user_id}) –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ—Ä–∫–∏"
                                )
                            except Exception as e:
                                logger.error(f"Error sending admin notification: {e}")

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase —Å –Ω–æ–≤—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        try:
                            file_ext = os.path.splitext(result_file)[1].lower()
                            supabase_path = f"{user_id}/results/result_{int(time.time())}{file_ext}"

                            with open(result_file, 'rb') as f:
                                supabase.storage.from_(UPLOADS_BUCKET).upload(
                                    path=supabase_path,
                                    file=f,
                                    file_options={"content-type": "image/jpeg" if file_ext in ('.jpg', '.jpeg') else
                                          "image/png" if file_ext == '.png' else
                                          "image/webp"}
                                )
                            logger.info(f"‚òÅÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {supabase_path}")
                        except Exception as upload_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase: {upload_error}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º Supabase, —Å–æ—Ö—Ä–∞–Ω—è—è username
                        try:
                            await supabase_api.upsert_row(user_id, current_username, {
                                "status": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                                "result_sent": True,
                                "ready": True,
                                "result_url": supabase_path if 'supabase_path' in locals() else None,
                                "username": current_username  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
                            })
                        except Exception as db_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Supabase: {db_error}")

                        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            shutil.rmtree(user_dir)
                            logger.info(f"üóëÔ∏è –ü–∞–ø–∫–∞ {user_dir} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞")
                        except Exception as cleanup_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {cleanup_error}")

                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
                        try:
                            base = supabase.storage.from_(UPLOADS_BUCKET)
                            files_to_delete = []

                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            for ext in SUPPORTED_EXTENSIONS:
                                files_to_delete.extend([
                                    f"{user_id_str}/photos/photo_1{ext}",
                                    f"{user_id_str}/photos/photo_2{ext}",
                                    f"{user_id_str}/models/selected_model{ext}"
                                ])

                            # –î–æ–±–∞–≤–ª—è–µ–º result-—Ñ–∞–π–ª—ã
                            files_to_delete.extend([
                                f"{user_id_str}/result{ext}" for ext in SUPPORTED_EXTENSIONS
                            ])

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ results
                            try:
                                result_files_in_supabase = base.list(f"{user_id_str}/results")
                                for f in result_files_in_supabase:
                                    if f['name'].startswith("result"):
                                        files_to_delete.append(f"{user_id_str}/results/{f['name']}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result-—Ñ–∞–π–ª–æ–≤: {e}")

                            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                            existing_files = []
                            for file_path in files_to_delete:
                                try:
                                    base.download(file_path)
                                    existing_files.append(file_path)
                                except Exception:
                                    continue

                            if existing_files:
                                logger.info(f"‚û°Ô∏è –£–¥–∞–ª—è–µ–º –∏–∑ Supabase: {existing_files}")
                                base.remove(existing_files)
                                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {len(existing_files)} —à—Ç.")
                            else:
                                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")

                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str} –∏–∑ Supabase: {e}")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                        continue

            await asyncio.sleep(30)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_results(): {e}")
            await asyncio.sleep(30)

@dp.callback_query(F.data == "continue_tryon")
async def continue_tryon_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∫–∏"""
    try:
        await send_welcome(
            callback_query.from_user.id,
            callback_query.from_user.username,
            callback_query.from_user.full_name
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in continue_tryon_handler: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

@dp.callback_query(F.data == "show_payment_options")
async def show_payment_options_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    try:
        await show_payment_options(callback_query.from_user)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in show_payment_options_handler: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()

async def monitor_payment_changes_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π payment_amount"""
    logger.info("Starting payment amount monitoring task...")
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            res = supabase.table(USERS_TABLE)\
                .select("user_id, payment_amount, username")\
                .execute()
            
            current_payments = {int(user['user_id']): float(user['payment_amount']) 
                              for user in res.data if user.get('payment_amount')}
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for user_id, current_amount in current_payments.items():
                previous_amount = supabase_api.last_payment_amounts.get(user_id, 0)
                
                if current_amount != previous_amount:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫
                    tries_left = int(current_amount / PRICE_PER_TRY)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    supabase_api.last_payment_amounts[user_id] = current_amount
                    supabase_api.last_tries_values[user_id] = tries_left
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_row = await supabase_api.get_user_row(user_id)
                    if not user_row:
                        continue
                    
                    username = user_row.get('username', '') if user_row.get('username') else ''
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    await supabase_api.update_user_row(user_id, {
                        ACCESS_FIELD: True if current_amount > 0 else False,
                        TRIES_FIELD: tries_left,
                        STATUS_FIELD: "–û–ø–ª–∞—á–µ–Ω–æ" if current_amount > 0 else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
                        FREE_TRIES_FIELD: True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
                    })
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    await supabase_api.send_payment_update_notifications(
                        user_id,
                        current_amount,
                        tries_left,
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                    )
            
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"Error in payment monitoring task: {e}")
            await asyncio.sleep(30)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ

async def handle(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    return web.Response(text="Bot is running")

async def health_check(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ health check"""
    return web.Response(text="OK", status=200)

def setup_web_server():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    
    app.router.add_get('/', handle)
    app.router.add_get('/health', health_check)
    app.router.add_post(f'/{BOT_TOKEN.split(":")[1]}', webhook_handler)
    return app

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(status=500, text="Internal Server Error")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    app = setup_web_server()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"Web server started on port {PORT}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        await start_web_server()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        webhook_url = f"https://virtual-tryon-bot.onrender.com/{BOT_TOKEN.split(':')[1]}"
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
        )
        logger.info(f"Webhook set to: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        asyncio.create_task(check_results())
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π payment_amount
        asyncio.create_task(monitor_payment_changes_task())
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
            
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by keyboard interrupt")
        
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
        
    finally:
        loop.run_until_complete(on_shutdown())
        loop.close()
        logger.info("Bot successfully shut down")