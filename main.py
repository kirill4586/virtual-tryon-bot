# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay
@dp.message(Command("pay"))
async def handle_pay_command(message: types.Message):
    try:
        amount = int(message.text.split()[1]) if len(message.text.split()) > 1 else None
        
        if amount is None:
            await message.answer(
                "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–º–∏–Ω–∏–º—É–º 30 —Ä—É–±):\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>50</code> - –¥–ª—è –æ–ø–ª–∞—Ç—ã 50 —Ä—É–±–ª–µ–π (1 –ø—Ä–∏–º–µ—Ä–∫–∞ = 30 —Ä—É–±)",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
                ])
            )
            return
            
        if amount < MIN_PAYMENT_AMOUNT:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {MIN_PAYMENT_AMOUNT} —Ä—É–±.")
            return
            
        await process_payment(message.from_user, amount)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö)")
    except Exception as e:
        logger.error(f"Error in handle_pay_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message(F.text & ~F.command)
async def handle_payment_amount(message: types.Message):
    try:
        if message.reply_to_message and "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã" in message.reply_to_message.text:
            try:
                amount = int(message.text)
                if amount < MIN_PAYMENT_AMOUNT:
                    await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {MIN_PAYMENT_AMOUNT} —Ä—É–±.")
                    return
                    
                await process_payment(message.from_user, amount)
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö)")
    except Exception as e:
        logger.error(f"Error in handle_payment_amount: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—É–º–º—É"
@dp.callback_query(F.data == "custom_payment")
async def handle_custom_payment(callback: types.CallbackQuery):
    try:
        await callback.message.answer(
            "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–º–∏–Ω–∏–º—É–º 30 —Ä—É–±):\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>50</code> - –¥–ª—è –æ–ø–ª–∞—Ç—ã 50 —Ä—É–±–ª–µ–π (1 –ø—Ä–∏–º–µ—Ä–∫–∞ = 30 —Ä—É–±)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
            ])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in handle_custom_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data == "cancel_payment")
async def handle_cancel_payment(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in handle_cancel_payment: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", show_alert=True)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
@dp.message(Command("balance"))
async def handle_balance(message: types.Message):
    tries_left = await get_user_tries(message.from_user.id)
    await message.answer(
        f"üîÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {tries_left} –ø—Ä–∏–º–µ—Ä–æ–∫\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=CUSTOM_PAYMENT_BTN_TEXT, callback_data="custom_payment")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 30 —Ä—É–± (1 –ø—Ä–∏–º–µ—Ä–∫–∞)", callback_data="pay_30")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 90 —Ä—É–± (3 –ø—Ä–∏–º–µ—Ä–∫–∏)", callback_data="pay_90")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
@dp.callback_query(F.data.startswith("pay_"))
async def handle_quick_payment(callback: types.CallbackQuery):
    try:
        amount = int(callback.data.split("_")[1])
        await process_payment(callback.from_user, amount)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in handle_quick_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
async def process_payment(user: types.User, amount: int):
    try:
        payment_label = f"tryon_{user.id}_{int(time.time())}"
        payment_link = await PaymentManager.create_payment_link(amount, payment_label)
        
        tries = amount // PRICE_PER_TRY
        text = (
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ <b>{amount} —Ä—É–±.</b> –∏ –ø–æ–ª—É—á–∏—Ç–µ <b>{tries} –ø—Ä–∏–º–µ—Ä–æ–∫</b>\n\n"
            f"üëâ <a href='{payment_link}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        )
        
        await bot.send_message(
            user.id,
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_label}")],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data=f"recheck_{payment_label}")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error in process_payment: {e}")
        await bot.send_message(user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(F.data.startswith("recheck_"))
async def handle_recheck_payment(callback: types.CallbackQuery):
    try:
        payment_label = callback.data.replace("recheck_", "")
        is_paid = await PaymentManager.check_payment(payment_label)
        
        if is_paid:
            amount = int(payment_label.split("_")[2])
            tries = amount // PRICE_PER_TRY
            user_id = callback.from_user.id
            
            current_tries = await get_user_tries(user_id)
            new_total = current_tries + tries
            await update_user_tries(user_id, new_total)
            
            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"üéÅ –ó–∞—á–∏—Å–ª–µ–Ω–æ: <b>{tries} –ø—Ä–∏–º–µ—Ä–æ–∫</b>\n"
                f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{new_total}</b>"
            )
            await notify_admin(f"üí∞ @{callback.from_user.username} ({user_id}) –æ–ø–ª–∞—Ç–∏–ª {amount} —Ä—É–±.")
        else:
            await callback.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"Error in handle_recheck_payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
@dp.message(Command("pay_help"))
async def pay_help(message: types.Message):
    await message.answer(
        "üí° –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ <code>/pay 150</code> (—á–∏—Å–ª–æ - —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö)\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n"
        "3. –ù–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª\n\n"
        "üéÅ –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 30 —Ä—É–± = 1 –ø—Ä–∏–º–µ—Ä–∫–∞\n"
        "‚Ä¢ 90 —Ä—É–± = 3 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
        "‚Ä¢ 150 —Ä—É–± = 5 –ø—Ä–∏–º–µ—Ä–æ–∫\n"
        "‚Ä¢ 300 —Ä—É–± = 10 –ø—Ä–∏–º–µ—Ä–æ–∫"
    )

# –î–∞–ª–µ–µ –∏–¥—É—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_results() –∏ main() –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
