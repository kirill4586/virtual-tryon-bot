import os
import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BASEROW_TOKEN = os.getenv("BASEROW_TOKEN")
TABLE_ID = int(os.getenv("TABLE_ID"))
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
YMONEY_TOKEN = os.getenv("YMONEY_TOKEN")
YMONEY_WALLET = os.getenv("YMONEY_WALLET")
PRICE_PER_TRY = 30  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –ø—Ä–∏–º–µ—Ä–∫—É –≤ —Ä—É–±–ª—è—Ö
FREE_USERS = {6320348591, 973853935}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
UPLOAD_DIR = "uploads"  # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –≤ Supabase Storage
MODELS_BUCKET = "models"
EXAMPLES_BUCKET = "primery"
SUPPORTED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.webp'}
MODELS_PER_PAGE = 3
EXAMPLES_PER_PAGE = 3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("Supabase client initialized successfully")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    try:
        res = supabase.storage.from_(UPLOAD_DIR).list()
        logger.info(f"Uploads folder exists in Supabase storage")
    except Exception as e:
        logger.info(f"Uploads folder doesn't exist, creating...")
        supabase.storage.create_bucket(UPLOAD_DIR, public=True)
        logger.info(f"Uploads folder created in Supabase storage")
        
except Exception as e:
    logger.error(f"Failed to initialize Supabase client: {e}")
    supabase = None

class BaserowAPI:
    def __init__(self):
        self.base_url = f"https://api.baserow.io/api/database/rows/table/{TABLE_ID}"
        self.headers = {
            "Authorization": f"Token {BASEROW_TOKEN}",
            "Content-Type": "application/json"
        }

    async def upsert_row(self, user_id: int, username: str, data: dict):
        try:
            url = f"{self.base_url}/?user_field_names=true&filter__user_id__equal={user_id}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers) as resp:
                    if resp.status != 200:
                        logger.error(f"Baserow GET error: {resp.status}")
                        return None
                    rows = await resp.json()
                    
                base_data = {
                    "user_id": str(user_id),
                    "username": username or ""
                }
                    
                if rows.get("results"):
                    row_id = rows["results"][0]["id"]
                    update_url = f"{self.base_url}/{row_id}/?user_field_names=true"
                    async with session.patch(update_url, headers=self.headers, json={**base_data, **data}) as resp:
                        return await resp.json()
                else:
                    async with session.post(f"{self.base_url}/?user_field_names=true", 
                                         headers=self.headers, 
                                         json={**base_data, **data}) as resp:
                        return await resp.json()
        except Exception as e:
            logger.error(f"Baserow API exception: {e}")
            return None

    async def reset_flags(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–ª–∞–∂–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            url = f"{self.base_url}/?user_field_names=true&filter__user_id__equal={user_id}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers) as resp:
                    if resp.status != 200:
                        logger.error(f"Baserow GET error: {resp.status}")
                        return False
                    rows = await resp.json()
                    
                if rows.get("results"):
                    row_id = rows["results"][0]["id"]
                    update_url = f"{self.base_url}/{row_id}/?user_field_names=true"
                    reset_data = {
                        "photo1_received": False,
                        "photo2_received": False,
                        "ready": False
                    }
                    async with session.patch(update_url, headers=self.headers, json=reset_data) as resp:
                        return resp.status == 200
        except Exception as e:
            logger.error(f"Error resetting flags: {e}")
            return False

baserow = BaserowAPI()

async def upload_to_supabase(user_id: int, file_name: str, file_data: bytes) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "uploads/user_id/filename"
        file_path = f"{user_id}/{file_name}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        res = supabase.storage.from_(UPLOAD_DIR).upload(file_path, file_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        url = supabase.storage.from_(UPLOAD_DIR).get_public_url(file_path)
        
        logger.info(f"File uploaded to Supabase: {url}")
        return url
        
    except Exception as e:
        logger.error(f"Error uploading to Supabase: {e}")
        raise

async def download_from_supabase(user_id: int, file_name: str) -> bytes:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Supabase Storage"""
    try:
        file_path = f"{user_id}/{file_name}"
        res = supabase.storage.from_(UPLOAD_DIR).download(file_path)
        return res
    except Exception as e:
        logger.error(f"Error downloading from Supabase: {e}")
        raise

async def list_user_files(user_id: int) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
    try:
        res = supabase.storage.from_(UPLOAD_DIR).list(str(user_id))
        return [file['name'] for file in res if any(file['name'].lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)]
    except Exception as e:
        logger.error(f"Error listing user files: {e}")
        return []

async def delete_user_files(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase"""
    try:
        files = await list_user_files(user_id)
        for file in files:
            supabase.storage.from_(UPLOAD_DIR).remove([f"{user_id}/{file}"])
        logger.info(f"Deleted all files for user {user_id}")
    except Exception as e:
        logger.error(f"Error deleting user files: {e}")

async def is_processing(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        files = await list_user_files(user_id)
        
        photos = [f for f in files if f.startswith("photo_")]
        model_selected = any(f.startswith("selected_model") for f in files)
        
        return (len(photos) >= 2 or (len(photos) >= 1 and model_selected))
    except Exception as e:
        logger.error(f"Error in is_processing: {e}")
        return False

async def get_user_tries(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –¥–ª—è —Ç–µ—Å—Ç–∞
    return 1

async def update_user_tries(user_id: int, tries: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pass

async def notify_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, message)
        except Exception as e:
            logger.error(f"Error sending admin notification: {e}")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    await baserow.upsert_row(user.id, user.username, {
        "status": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω",
        "first_start": True
    })
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–µ–∂–¥—ã!\n\n"
        "üì∏ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "1. –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã (–Ω–∞ –≤–µ—à–∞–ª–∫–µ –∏–ª–∏ –±–µ–∑)\n"
        "2. –§–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n\n"
        "üîÑ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–≤—É—Ö —Ñ–æ—Ç–æ –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–∫—É!"
    )
    
    await message.answer(welcome_text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã (–Ω–∞ –≤–µ—à–∞–ª–∫–µ –∏–ª–∏ –±–µ–∑ —Ñ–æ–Ω–∞)\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏!\n\n"
        "üõ† –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - @support"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@dp.message(Command("models"))
async def cmd_models(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ Supabase Storage
        models = supabase.storage.from_(MODELS_BUCKET).list()
        
        if not models:
            await message.answer("üòï –ú–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for model in models[:MODELS_PER_PAGE]:
            model_name = os.path.splitext(model['name'])[0]
            callback_data = f"model_{MODELS_BUCKET}/{model['name']}"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=model_name, callback_data=callback_data)
            ])
        
        await message.answer(
            "üëó –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error showing models: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====================

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user = message.from_user
    user_id = user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if user_id in FREE_USERS:
            await process_photo(message, user)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
        tries_left = await get_user_tries(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
        if tries_left <= 0:
            payment_label = f"tryon_{user_id}"
            payment_link = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YMONEY_WALLET}&quickpay-form=small&targets={payment_label}&sum={PRICE_PER_TRY}&label={payment_label}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 30 —Ä—É–±", url=payment_link)],
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_label}")]
            ])
            
            await message.answer(
                "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∫–∏.\n\n"
                "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏: 30 —Ä—É–±.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–Ω–µ—Å–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "30 —Ä—É–± = 1 –ø—Ä–∏–º–µ—Ä–∫–∞\n"
                "60 —Ä—É–± = 2 –ø—Ä–∏–º–µ—Ä–∫–∏\n"
                "90 —Ä—É–± = 3 –ø—Ä–∏–º–µ—Ä–∫–∏ –∏ —Ç.–¥.",
                reply_markup=keyboard
            )
            return
            
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        await process_photo(message, user)
        
    except Exception as e:
        logger.error(f"Error handling photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def process_photo(message: types.Message, user: types.User):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Supabase"""
    try:
        files = await list_user_files(user.id)
        
        photo_number = len([f for f in files if f.startswith("photo_")]) + 1
        
        if photo_number > 2:
            await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ 2 —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        model_selected = any(f.startswith("selected_model") for f in files)
        first_photo_exists = any(f.startswith("photo_1") for f in files)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, –Ω–æ –µ—Å—Ç—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if photo_number == 2 and not model_selected and first_photo_exists:
            photo = message.photo[-1]
            file_ext = os.path.splitext(photo.file_id)[1] or '.jpg'
            file_name = f"photo_{photo_number}{file_ext}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
            file_data = await bot.download(photo)
            await upload_to_supabase(user.id, file_name, file_data)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            tries_left = await get_user_tries(user.id)
            if tries_left > 0:
                await update_user_tries(user.id, tries_left - 1)
            
            await baserow.upsert_row(user.id, user.username, {
                "photo_person": True,
                "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                "photo1_received": True,
                "photo2_received": True
            })
            
            await message.answer(
                "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
                "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            )
            await notify_admin(f"üì∏ –ù–æ–≤—ã–µ —Ñ–æ—Ç–æ –æ—Ç @{user.username} ({user.id})")
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if photo_number == 1:
            photo = message.photo[-1]
            file_ext = os.path.splitext(photo.file_id)[1] or '.jpg'
            file_name = f"photo_{photo_number}{file_ext}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
            file_data = await bot.download(photo)
            await upload_to_supabase(user.id, file_name, file_data)
            
            await baserow.upsert_row(user.id, user.username, {
                "photo_clothes": True,
                "status": "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞/–º–æ–¥–µ–ª–∏",
                "photo1_received": True,
                "photo2_received": False
            })
            
            response_text = (
                "‚úÖ –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞."
            )
            await message.answer(response_text)
            
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====================

@dp.callback_query(F.data.startswith("model_"))
async def model_selected(callback_query: types.CallbackQuery):
    if await is_processing(callback_query.from_user.id):
        await callback_query.answer("‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", show_alert=True)
        return
        
    model_path = callback_query.data.replace("model_", "")
    category, model_name = model_path.split('/')
    user_id = callback_query.from_user.id
    
    try:
        await callback_query.message.delete()
        
        files = await list_user_files(user_id)
        clothes_photo_exists = any(f.startswith("photo_1") for f in files)

        model_display_name = os.path.splitext(model_name)[0]
        await baserow.upsert_row(user_id, callback_query.from_user.username, {
            "model_selected": model_path,
            "status": "model_selected"
        })
        
        if supabase:
            try:
                model_url = supabase.storage.from_(MODELS_BUCKET).get_public_url(f"{model_path}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
                model_data = supabase.storage.from_(MODELS_BUCKET).download(f"{model_path}")
                await upload_to_supabase(user_id, "selected_model.jpg", model_data)
                
                logger.info(f"Model {model_path} downloaded successfully")
                
                if clothes_photo_exists:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "‚úÖ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã.\n"
                        "üîÑ –ò–¥—ë—Ç –ø—Ä–∏–º–µ—Ä–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                    )
                    await baserow.upsert_row(user_id, callback_query.from_user.username, {
                        "photo_person": True,
                        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                        "photo1_received": True,
                        "photo2_received": True
                    })
                    await notify_admin(f"üì∏ –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç @{callback_query.from_user.username} ({user_id})")
                else:
                    response_text = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å {model_display_name} –≤—ã–±—Ä–∞–Ω–∞.\n\n"
                        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã."
                    )
                    await baserow.upsert_row(user_id, callback_query.from_user.username, {
                        "photo1_received": False,
                        "photo2_received": True
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–º—ã–π –Ω–∏–∑
                await bot.send_photo(
                    chat_id=user_id,
                    photo=model_url,
                    caption=response_text
                )
                
            except Exception as e:
                logger.error(f"Error downloading model: {e}")
                await bot.send_message(
                    user_id,
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é."
                )
                return
            
    except Exception as e:
        logger.error(f"Error in model_selected: {e}")
        await bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"""
    payment_label = callback_query.data.replace("check_payment_", "")
    user_id = callback_query.from_user.id
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooMoney API
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        payment_success = True
        
        if payment_success:
            await callback_query.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
            await update_user_tries(user_id, 1)  # –î–æ–±–∞–≤–ª—è–µ–º 1 –ø–æ–ø—ã—Ç–∫—É
            await callback_query.message.delete()
        else:
            await callback_query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# ===================== –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò =====================

async def check_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Supabase –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–æ–∫ –≤ Supabase
            res = supabase.storage.from_(UPLOAD_DIR).list()
            user_folders = [item['name'] for item in res if item['name'].isdigit()]
            
            for user_id in user_folders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                files = supabase.storage.from_(UPLOAD_DIR).list(user_id)
                result_file = next((f for f in files if f['name'].startswith("result")), None)
                
                if result_file:
                    try:
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result_data = supabase.storage.from_(UPLOAD_DIR).download(f"{user_id}/{result_file['name']}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await bot.send_photo(
                            chat_id=int(user_id),
                            photo=result_data,
                            caption="üéâ –í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\nüëö –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë –ø—Ä–∏–º–µ—Ä–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        await baserow.upsert_row(int(user_id), "", {
                            "status": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                            "result_sent": True,
                            "ready": True
                        })
                        
                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await delete_user_files(user_id)
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        
                    except Exception as e:
                        logger.error(f"Error sending result to {user_id}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in results watcher: {e}")
        
        await asyncio.sleep(10)

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot started")
    asyncio.create_task(check_results())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot stopped")

async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
